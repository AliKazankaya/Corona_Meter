
Corona_Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f68  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800563c  0800563c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800563c  0800563c  0001563c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005644  08005644  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005648  08005648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800564c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000078  080056c4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  080056c4  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f381  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246f  00000000  00000000  0002f429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00031898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021492  00000000  00000000  00032e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e629  00000000  00000000  0005430a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c56b4  00000000  00000000  00062933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00127fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003244  00000000  00000000  0012803c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046bc 	.word	0x080046bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080046bc 	.word	0x080046bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e007      	b.n	80005a0 <bufclr+0x28>
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf3      	blt.n	8000590 <bufclr+0x18>
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005be:	f000 f933 	bl	8000828 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <ESP_Init+0x88>)
 80005c4:	f000 f9ec 	bl	80009a0 <Uart_sendstring>
	HAL_Delay(5000);
 80005c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005cc:	f001 f964 	bl	8001898 <HAL_Delay>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <ESP_Init+0x8c>)
 80005d2:	f000 f9e5 	bl	80009a0 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n")));
 80005d6:	bf00      	nop
 80005d8:	481a      	ldr	r0, [pc, #104]	; (8000644 <ESP_Init+0x90>)
 80005da:	f000 fa85 	bl	8000ae8 <Wait_for>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f9      	beq.n	80005d8 <ESP_Init+0x24>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <ESP_Init+0x94>)
 80005e6:	f000 f9db 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n")));
 80005ea:	bf00      	nop
 80005ec:	4817      	ldr	r0, [pc, #92]	; (800064c <ESP_Init+0x98>)
 80005ee:	f000 fa7b 	bl	8000ae8 <Wait_for>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <ESP_Init+0x38>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80005f8:	f107 0008 	add.w	r0, r7, #8
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4913      	ldr	r1, [pc, #76]	; (8000650 <ESP_Init+0x9c>)
 8000602:	f003 fc2d 	bl	8003e60 <siprintf>
	Uart_sendstring(data);
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f9c8 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n")));
 8000610:	bf00      	nop
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <ESP_Init+0xa0>)
 8000614:	f000 fa68 	bl	8000ae8 <Wait_for>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <ESP_Init+0x5e>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <ESP_Init+0xa4>)
 8000620:	f000 f9be 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=0\r\r\n\r\nOK\r\n")));
 8000624:	bf00      	nop
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <ESP_Init+0xa8>)
 8000628:	f000 fa5e 	bl	8000ae8 <Wait_for>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f9      	beq.n	8000626 <ESP_Init+0x72>

}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	080046d4 	.word	0x080046d4
 8000640:	080046e0 	.word	0x080046e0
 8000644:	080046e8 	.word	0x080046e8
 8000648:	080046f4 	.word	0x080046f4
 800064c:	08004704 	.word	0x08004704
 8000650:	0800471c 	.word	0x0800471c
 8000654:	08004734 	.word	0x08004734
 8000658:	08004748 	.word	0x08004748
 800065c:	08004758 	.word	0x08004758

08000660 <ESP_GetData>:

void ESP_GetData (char *api_key, char *Total, char *Deaths, char *Recovered)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0a6      	sub	sp, #152	; 0x98
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	603b      	str	r3, [r7, #0]
	char local_buf[100] = {0};
 800066e:	2300      	movs	r3, #0
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
 8000672:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000676:	2260      	movs	r2, #96	; 0x60
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fbb4 	bl	8003de8 <memset>
	char local_buf2[30] = {0};
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
 8000696:	831a      	strh	r2, [r3, #24]
	
	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8000698:	485a      	ldr	r0, [pc, #360]	; (8000804 <ESP_GetData+0x1a4>)
 800069a:	f000 f981 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("CONNECT\r\n\r\nOK\r\n")));
 800069e:	bf00      	nop
 80006a0:	4859      	ldr	r0, [pc, #356]	; (8000808 <ESP_GetData+0x1a8>)
 80006a2:	f000 fa21 	bl	8000ae8 <Wait_for>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f9      	beq.n	80006a0 <ESP_GetData+0x40>
	
	sprintf (local_buf, "GET /apps/thinghttp/send_request?api_key=%s\r\n", api_key);
 80006ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	4956      	ldr	r1, [pc, #344]	; (800080c <ESP_GetData+0x1ac>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fbd3 	bl	8003e60 <siprintf>
	int len = strlen (local_buf);
 80006ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd86 	bl	80001d0 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	
	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80006d2:	494f      	ldr	r1, [pc, #316]	; (8000810 <ESP_GetData+0x1b0>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fbc3 	bl	8003e60 <siprintf>
	Uart_sendstring(local_buf2);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f95e 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for(">")));
 80006e4:	bf00      	nop
 80006e6:	484b      	ldr	r0, [pc, #300]	; (8000814 <ESP_GetData+0x1b4>)
 80006e8:	f000 f9fe 	bl	8000ae8 <Wait_for>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <ESP_GetData+0x86>
	
	bufclr(local_buf2);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff3e 	bl	8000578 <bufclr>

	Uart_sendstring (local_buf);
 80006fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f94d 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8000706:	bf00      	nop
 8000708:	4843      	ldr	r0, [pc, #268]	; (8000818 <ESP_GetData+0x1b8>)
 800070a:	f000 f9ed 	bl	8000ae8 <Wait_for>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f9      	beq.n	8000708 <ESP_GetData+0xa8>
	

	while (!(Wait_for ("\">")));
 8000714:	bf00      	nop
 8000716:	4841      	ldr	r0, [pc, #260]	; (800081c <ESP_GetData+0x1bc>)
 8000718:	f000 f9e6 	bl	8000ae8 <Wait_for>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f9      	beq.n	8000716 <ESP_GetData+0xb6>
	while (!(Copy_upto ("</span>", local_buf2)));
 8000722:	bf00      	nop
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	483d      	ldr	r0, [pc, #244]	; (8000820 <ESP_GetData+0x1c0>)
 800072c:	f000 f968 	bl	8000a00 <Copy_upto>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0f6      	beq.n	8000724 <ESP_GetData+0xc4>
	len = strlen (local_buf2);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd48 	bl	80001d0 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	snprintf (Total, len-6,local_buf2);
 8000746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800074a:	3b06      	subs	r3, #6
 800074c:	4619      	mov	r1, r3
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	461a      	mov	r2, r3
 8000754:	68b8      	ldr	r0, [r7, #8]
 8000756:	f003 fb4f 	bl	8003df8 <sniprintf>


	bufclr(local_buf2);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff0a 	bl	8000578 <bufclr>
	while (!(Wait_for("<span>")));
 8000764:	bf00      	nop
 8000766:	482f      	ldr	r0, [pc, #188]	; (8000824 <ESP_GetData+0x1c4>)
 8000768:	f000 f9be 	bl	8000ae8 <Wait_for>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f9      	beq.n	8000766 <ESP_GetData+0x106>
	while (!(Copy_upto ("</span>", local_buf2)));
 8000772:	bf00      	nop
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	4829      	ldr	r0, [pc, #164]	; (8000820 <ESP_GetData+0x1c0>)
 800077c:	f000 f940 	bl	8000a00 <Copy_upto>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f6      	beq.n	8000774 <ESP_GetData+0x114>
	len = strlen (local_buf2);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd20 	bl	80001d0 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	snprintf (Deaths, len-6,local_buf2);
 8000796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800079a:	3b06      	subs	r3, #6
 800079c:	4619      	mov	r1, r3
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	461a      	mov	r2, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f003 fb27 	bl	8003df8 <sniprintf>

	bufclr(local_buf2);
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fee2 	bl	8000578 <bufclr>
	while (!(Wait_for("<span>")));
 80007b4:	bf00      	nop
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <ESP_GetData+0x1c4>)
 80007b8:	f000 f996 	bl	8000ae8 <Wait_for>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0f9      	beq.n	80007b6 <ESP_GetData+0x156>
	while (!(Copy_upto ("</span>", local_buf2)));
 80007c2:	bf00      	nop
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4815      	ldr	r0, [pc, #84]	; (8000820 <ESP_GetData+0x1c0>)
 80007cc:	f000 f918 	bl	8000a00 <Copy_upto>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f6      	beq.n	80007c4 <ESP_GetData+0x164>
	len = strlen (local_buf2);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fcf8 	bl	80001d0 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	snprintf (Recovered, len-6,local_buf2);
 80007e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007ea:	3b06      	subs	r3, #6
 80007ec:	4619      	mov	r1, r3
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	461a      	mov	r2, r3
 80007f4:	6838      	ldr	r0, [r7, #0]
 80007f6:	f003 faff 	bl	8003df8 <sniprintf>
}
 80007fa:	bf00      	nop
 80007fc:	3798      	adds	r7, #152	; 0x98
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	08004770 	.word	0x08004770
 8000808:	0800479c 	.word	0x0800479c
 800080c:	080047ac 	.word	0x080047ac
 8000810:	080047dc 	.word	0x080047dc
 8000814:	080047ec 	.word	0x080047ec
 8000818:	080047f0 	.word	0x080047f0
 800081c:	080047fc 	.word	0x080047fc
 8000820:	08004800 	.word	0x08004800
 8000824:	08004808 	.word	0x08004808

08000828 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <Ringbuf_init+0x3c>)
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <Ringbuf_init+0x40>)
 8000830:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <Ringbuf_init+0x44>)
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <Ringbuf_init+0x48>)
 8000836:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <Ringbuf_init+0x4c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <Ringbuf_init+0x4c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f042 0201 	orr.w	r2, r2, #1
 8000846:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <Ringbuf_init+0x4c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <Ringbuf_init+0x4c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f042 0220 	orr.w	r2, r2, #32
 8000856:	60da      	str	r2, [r3, #12]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2000053c 	.word	0x2000053c
 8000868:	20000094 	.word	0x20000094
 800086c:	20000538 	.word	0x20000538
 8000870:	200000dc 	.word	0x200000dc
 8000874:	20000540 	.word	0x20000540

08000878 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	3301      	adds	r3, #1
 800088a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800088e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	429a      	cmp	r2, r3
 8000898:	d007      	beq.n	80008aa <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	79f9      	ldrb	r1, [r7, #7]
 80008a2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <Uart_read+0x4c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <Uart_read+0x4c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d102      	bne.n	80008d4 <Uart_read+0x1c>
  {
    return -1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e010      	b.n	80008f6 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <Uart_read+0x4c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <Uart_read+0x4c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	5cd3      	ldrb	r3, [r2, r3]
 80008e0:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <Uart_read+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <Uart_read+0x4c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008f2:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	2000053c 	.word	0x2000053c

08000908 <Uart_write>:

void Uart_write(int c)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db21      	blt.n	800095a <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <Uart_write+0x60>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	3301      	adds	r3, #1
 800091e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000922:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000924:	bf00      	nop
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <Uart_write+0x60>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	429a      	cmp	r2, r3
 8000930:	d0f9      	beq.n	8000926 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <Uart_write+0x60>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <Uart_write+0x60>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	b2c9      	uxtb	r1, r1
 8000940:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <Uart_write+0x60>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <Uart_write+0x64>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <Uart_write+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000958:	60da      	str	r2, [r3, #12]
	}
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000538 	.word	0x20000538
 800096c:	20000540 	.word	0x20000540

08000970 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <IsDataAvailable+0x2c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <IsDataAvailable+0x2c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	b29b      	uxth	r3, r3
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	b29b      	uxth	r3, r3
 8000988:	3340      	adds	r3, #64	; 0x40
 800098a:	b29b      	uxth	r3, r3
 800098c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2000053c 	.word	0x2000053c

080009a0 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80009a8:	e006      	b.n	80009b8 <Uart_sendstring+0x18>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ffa8 	bl	8000908 <Uart_write>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f4      	bne.n	80009aa <Uart_sendstring+0xa>
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <Uart_peek+0x30>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <Uart_peek+0x30>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009dc:	429a      	cmp	r2, r3
 80009de:	d102      	bne.n	80009e6 <Uart_peek+0x1a>
  {
    return -1;
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	e005      	b.n	80009f2 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <Uart_peek+0x30>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <Uart_peek+0x30>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f0:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	2000053c 	.word	0x2000053c

08000a00 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fbde 	bl	80001d0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8000a1c:	bf00      	nop
 8000a1e:	f7ff ffa7 	bl	8000970 <IsDataAvailable>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0fa      	beq.n	8000a1e <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8000a28:	e01b      	b.n	8000a62 <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <Copy_upto+0xe4>)
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <Copy_upto+0xe4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	6838      	ldr	r0, [r7, #0]
 8000a38:	4403      	add	r3, r0
 8000a3a:	5c8a      	ldrb	r2, [r1, r2]
 8000a3c:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <Copy_upto+0xe4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	1c5a      	adds	r2, r3, #1
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <Copy_upto+0xe4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a4e:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	3301      	adds	r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8000a56:	bf00      	nop
 8000a58:	f7ff ff8a 	bl	8000970 <IsDataAvailable>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0fa      	beq.n	8000a58 <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 8000a62:	f7ff ffb3 	bl	80009cc <Uart_peek>
 8000a66:	4601      	mov	r1, r0
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d1da      	bne.n	8000a2a <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 8000a74:	e019      	b.n	8000aaa <Copy_upto+0xaa>
	{
		so_far++;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8000a7c:	f7ff ff1c 	bl	80008b8 <Uart_read>
 8000a80:	4601      	mov	r1, r0
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	613a      	str	r2, [r7, #16]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d101      	bne.n	8000a9e <Copy_upto+0x9e>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e01d      	b.n	8000ada <Copy_upto+0xda>
		while (!IsDataAvailable());
 8000a9e:	bf00      	nop
 8000aa0:	f7ff ff66 	bl	8000970 <IsDataAvailable>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0fa      	beq.n	8000aa0 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 8000aaa:	f7ff ff8f 	bl	80009cc <Uart_peek>
 8000aae:	4601      	mov	r1, r0
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d0dc      	beq.n	8000a76 <Copy_upto+0x76>
	}

	if (so_far != len)
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <Copy_upto+0xca>
	{
		so_far = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
		goto again;
 8000ac8:	e7a8      	b.n	8000a1c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d101      	bne.n	8000ad6 <Copy_upto+0xd6>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e001      	b.n	8000ada <Copy_upto+0xda>
	else return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000053c 	.word	0x2000053c

08000ae8 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fb6b 	bl	80001d0 <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8000afe:	bf00      	nop
 8000b00:	f7ff ff36 	bl	8000970 <IsDataAvailable>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0fa      	beq.n	8000b00 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8000b0a:	f7ff ff5f 	bl	80009cc <Uart_peek>
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d01a      	beq.n	8000b52 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <Wait_for+0xa4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <Wait_for+0xa4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b2c:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8000b2e:	e7e6      	b.n	8000afe <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8000b36:	f7ff febf 	bl	80008b8 <Uart_read>
		if (so_far == len) return 1;
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d101      	bne.n	8000b46 <Wait_for+0x5e>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e01d      	b.n	8000b82 <Wait_for+0x9a>
		while (!IsDataAvailable());
 8000b46:	bf00      	nop
 8000b48:	f7ff ff12 	bl	8000970 <IsDataAvailable>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0fa      	beq.n	8000b48 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8000b52:	f7ff ff3b 	bl	80009cc <Uart_peek>
 8000b56:	4601      	mov	r1, r0
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d0e5      	beq.n	8000b30 <Wait_for+0x48>
	}

	if (so_far != len)
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d002      	beq.n	8000b72 <Wait_for+0x8a>
	{
		so_far = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
		goto again;
 8000b70:	e7c5      	b.n	8000afe <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d101      	bne.n	8000b7e <Wait_for+0x96>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e001      	b.n	8000b82 <Wait_for+0x9a>
	else return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000053c 	.word	0x2000053c

08000b90 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0320 	and.w	r3, r3, #32
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d013      	beq.n	8000bda <Uart_isr+0x4a>
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	f003 0320 	and.w	r3, r3, #32
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00e      	beq.n	8000bda <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <Uart_isr+0xac>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe50 	bl	8000878 <store_char>
        return;
 8000bd8:	e02c      	b.n	8000c34 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d027      	beq.n	8000c34 <Uart_isr+0xa4>
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d022      	beq.n	8000c34 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <Uart_isr+0xb0>)
 8000bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <Uart_isr+0xb0>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d108      	bne.n	8000c0c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c08:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000c0a:	e012      	b.n	8000c32 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <Uart_isr+0xb0>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <Uart_isr+0xb0>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <Uart_isr+0xb0>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <Uart_isr+0xb0>)
 8000c22:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	7bba      	ldrb	r2, [r7, #14]
 8000c30:	605a      	str	r2, [r3, #4]
    	return;
 8000c32:	bf00      	nop
    }
}
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000053c 	.word	0x2000053c
 8000c40:	200000dc 	.word	0x200000dc

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f000 fdb4 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f8a2 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f000 f962 	bl	8000f18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c54:	f000 f908 	bl	8000e68 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c58:	f000 f934 	bl	8000ec4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8000c5c:	f000 f998 	bl	8000f90 <SSD1306_Init>
  SSD1306_GotoXY(0, 20);
 8000c60:	2114      	movs	r1, #20
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 fafe 	bl	8001264 <SSD1306_GotoXY>
  SSD1306_Puts("Connecting..", &Font_11x18, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	493d      	ldr	r1, [pc, #244]	; (8000d60 <main+0x11c>)
 8000c6c:	483d      	ldr	r0, [pc, #244]	; (8000d64 <main+0x120>)
 8000c6e:	f000 fb8f 	bl	8001390 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000c72:	f000 fa51 	bl	8001118 <SSD1306_UpdateScreen>
  ESP_Init("TurkTelekom_ZT37UQ_5GHz", "KTyucb44sXDs");
 8000c76:	493c      	ldr	r1, [pc, #240]	; (8000d68 <main+0x124>)
 8000c78:	483c      	ldr	r0, [pc, #240]	; (8000d6c <main+0x128>)
 8000c7a:	f7ff fc9b 	bl	80005b4 <ESP_Init>
  SSD1306_Clear();
 8000c7e:	f000 fbac 	bl	80013da <SSD1306_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  SSD1306_GotoXY(0, 0);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 faed 	bl	8001264 <SSD1306_GotoXY>
	  SSD1306_Puts("COVID TURKEY", &Font_11x18, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4934      	ldr	r1, [pc, #208]	; (8000d60 <main+0x11c>)
 8000c8e:	4838      	ldr	r0, [pc, #224]	; (8000d70 <main+0x12c>)
 8000c90:	f000 fb7e 	bl	8001390 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 30);
 8000c94:	211e      	movs	r1, #30
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fae4 	bl	8001264 <SSD1306_GotoXY>
	  SSD1306_Puts("Live Feed", &Font_11x18, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4930      	ldr	r1, [pc, #192]	; (8000d60 <main+0x11c>)
 8000ca0:	4834      	ldr	r0, [pc, #208]	; (8000d74 <main+0x130>)
 8000ca2:	f000 fb75 	bl	8001390 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8000ca6:	f000 fa37 	bl	8001118 <SSD1306_UpdateScreen>

      HAL_Delay(2000);
 8000caa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cae:	f000 fdf3 	bl	8001898 <HAL_Delay>

	  ESP_GetData("PKRXZX9G072FL53Q", Total, Death, Recovered);
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <main+0x134>)
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <main+0x138>)
 8000cb6:	4932      	ldr	r1, [pc, #200]	; (8000d80 <main+0x13c>)
 8000cb8:	4832      	ldr	r0, [pc, #200]	; (8000d84 <main+0x140>)
 8000cba:	f7ff fcd1 	bl	8000660 <ESP_GetData>

	  SSD1306_Clear();
 8000cbe:	f000 fb8c 	bl	80013da <SSD1306_Clear>


	  SSD1306_GotoXY(30, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	201e      	movs	r0, #30
 8000cc6:	f000 facd 	bl	8001264 <SSD1306_GotoXY>
	  SSD1306_Puts("TOTAL", &Font_11x18, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4924      	ldr	r1, [pc, #144]	; (8000d60 <main+0x11c>)
 8000cce:	482e      	ldr	r0, [pc, #184]	; (8000d88 <main+0x144>)
 8000cd0:	f000 fb5e 	bl	8001390 <SSD1306_Puts>
	  SSD1306_GotoXY(20, 30);
 8000cd4:	211e      	movs	r1, #30
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f000 fac4 	bl	8001264 <SSD1306_GotoXY>
	  SSD1306_Puts(Total, &Font_11x18, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4920      	ldr	r1, [pc, #128]	; (8000d60 <main+0x11c>)
 8000ce0:	4827      	ldr	r0, [pc, #156]	; (8000d80 <main+0x13c>)
 8000ce2:	f000 fb55 	bl	8001390 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000ce6:	f000 fa17 	bl	8001118 <SSD1306_UpdateScreen>
	  HAL_Delay(5000);
 8000cea:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cee:	f000 fdd3 	bl	8001898 <HAL_Delay>
	  SSD1306_Clear();
 8000cf2:	f000 fb72 	bl	80013da <SSD1306_Clear>



	  SSD1306_GotoXY(20, 0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2014      	movs	r0, #20
 8000cfa:	f000 fab3 	bl	8001264 <SSD1306_GotoXY>
	  SSD1306_Puts("DEATHS", &Font_11x18, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4917      	ldr	r1, [pc, #92]	; (8000d60 <main+0x11c>)
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <main+0x148>)
 8000d04:	f000 fb44 	bl	8001390 <SSD1306_Puts>
	  SSD1306_GotoXY(30, 30);
 8000d08:	211e      	movs	r1, #30
 8000d0a:	201e      	movs	r0, #30
 8000d0c:	f000 faaa 	bl	8001264 <SSD1306_GotoXY>
	  SSD1306_Puts(Death, &Font_11x18, 1);
 8000d10:	2201      	movs	r2, #1
 8000d12:	4913      	ldr	r1, [pc, #76]	; (8000d60 <main+0x11c>)
 8000d14:	4819      	ldr	r0, [pc, #100]	; (8000d7c <main+0x138>)
 8000d16:	f000 fb3b 	bl	8001390 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000d1a:	f000 f9fd 	bl	8001118 <SSD1306_UpdateScreen>
	  HAL_Delay(5000);
 8000d1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d22:	f000 fdb9 	bl	8001898 <HAL_Delay>
	  SSD1306_Clear();
 8000d26:	f000 fb58 	bl	80013da <SSD1306_Clear>



	  SSD1306_GotoXY(5, 0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2005      	movs	r0, #5
 8000d2e:	f000 fa99 	bl	8001264 <SSD1306_GotoXY>
	  SSD1306_Puts("RECOVERED", &Font_11x18, 1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	490a      	ldr	r1, [pc, #40]	; (8000d60 <main+0x11c>)
 8000d36:	4816      	ldr	r0, [pc, #88]	; (8000d90 <main+0x14c>)
 8000d38:	f000 fb2a 	bl	8001390 <SSD1306_Puts>
	  SSD1306_GotoXY(20, 30);
 8000d3c:	211e      	movs	r1, #30
 8000d3e:	2014      	movs	r0, #20
 8000d40:	f000 fa90 	bl	8001264 <SSD1306_GotoXY>
	  SSD1306_Puts(Recovered, &Font_11x18, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	4906      	ldr	r1, [pc, #24]	; (8000d60 <main+0x11c>)
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <main+0x134>)
 8000d4a:	f000 fb21 	bl	8001390 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000d4e:	f000 f9e3 	bl	8001118 <SSD1306_UpdateScreen>
	  HAL_Delay(5000);
 8000d52:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d56:	f000 fd9f 	bl	8001898 <HAL_Delay>
	  SSD1306_Clear();
 8000d5a:	f000 fb3e 	bl	80013da <SSD1306_Clear>
	  SSD1306_GotoXY(0, 0);
 8000d5e:	e790      	b.n	8000c82 <main+0x3e>
 8000d60:	20000000 	.word	0x20000000
 8000d64:	08004810 	.word	0x08004810
 8000d68:	08004820 	.word	0x08004820
 8000d6c:	08004830 	.word	0x08004830
 8000d70:	08004848 	.word	0x08004848
 8000d74:	08004858 	.word	0x08004858
 8000d78:	200005ec 	.word	0x200005ec
 8000d7c:	200005e4 	.word	0x200005e4
 8000d80:	200005d8 	.word	0x200005d8
 8000d84:	08004864 	.word	0x08004864
 8000d88:	08004878 	.word	0x08004878
 8000d8c:	08004880 	.word	0x08004880
 8000d90:	08004888 	.word	0x08004888

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 f820 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xd0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e04:	2304      	movs	r3, #4
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e08:	23a8      	movs	r3, #168	; 0xa8
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e10:	2304      	movs	r3, #4
 8000e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fe1b 	bl	8002a54 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e24:	f000 f8ae 	bl	8000f84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2105      	movs	r1, #5
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 f87c 	bl	8002f44 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e52:	f000 f897 	bl	8000f84 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	; 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <MX_I2C1_Init+0x54>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_I2C1_Init+0x58>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea6:	f001 f85b 	bl	8001f60 <HAL_I2C_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb0:	f000 f868 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000584 	.word	0x20000584
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	00061a80 	.word	0x00061a80

08000ec4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART1_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART1_UART_Init+0x4c>)
 8000efc:	f002 fa1e 	bl	800333c <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f06:	f000 f83d 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000540 	.word	0x20000540
 8000f14:	40011000 	.word	0x40011000

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_GPIO_Init+0x68>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f96:	f000 fa29 	bl	80013ec <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f9a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2178      	movs	r1, #120	; 0x78
 8000fa2:	485b      	ldr	r0, [pc, #364]	; (8001110 <SSD1306_Init+0x180>)
 8000fa4:	f001 fa1e 	bl	80023e4 <HAL_I2C_IsDeviceReady>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e0a9      	b.n	8001106 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000fb2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000fb6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fb8:	e002      	b.n	8000fc0 <SSD1306_Init+0x30>
		p--;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f9      	bne.n	8000fba <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fc6:	22ae      	movs	r2, #174	; 0xae
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2078      	movs	r0, #120	; 0x78
 8000fcc:	f000 fa6c 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2078      	movs	r0, #120	; 0x78
 8000fd6:	f000 fa67 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fda:	2210      	movs	r2, #16
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2078      	movs	r0, #120	; 0x78
 8000fe0:	f000 fa62 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fe4:	22b0      	movs	r2, #176	; 0xb0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2078      	movs	r0, #120	; 0x78
 8000fea:	f000 fa5d 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fee:	22c8      	movs	r2, #200	; 0xc8
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2078      	movs	r0, #120	; 0x78
 8000ff4:	f000 fa58 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2078      	movs	r0, #120	; 0x78
 8000ffe:	f000 fa53 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001002:	2210      	movs	r2, #16
 8001004:	2100      	movs	r1, #0
 8001006:	2078      	movs	r0, #120	; 0x78
 8001008:	f000 fa4e 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800100c:	2240      	movs	r2, #64	; 0x40
 800100e:	2100      	movs	r1, #0
 8001010:	2078      	movs	r0, #120	; 0x78
 8001012:	f000 fa49 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001016:	2281      	movs	r2, #129	; 0x81
 8001018:	2100      	movs	r1, #0
 800101a:	2078      	movs	r0, #120	; 0x78
 800101c:	f000 fa44 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	2100      	movs	r1, #0
 8001024:	2078      	movs	r0, #120	; 0x78
 8001026:	f000 fa3f 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800102a:	22a1      	movs	r2, #161	; 0xa1
 800102c:	2100      	movs	r1, #0
 800102e:	2078      	movs	r0, #120	; 0x78
 8001030:	f000 fa3a 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001034:	22a6      	movs	r2, #166	; 0xa6
 8001036:	2100      	movs	r1, #0
 8001038:	2078      	movs	r0, #120	; 0x78
 800103a:	f000 fa35 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800103e:	22a8      	movs	r2, #168	; 0xa8
 8001040:	2100      	movs	r1, #0
 8001042:	2078      	movs	r0, #120	; 0x78
 8001044:	f000 fa30 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001048:	223f      	movs	r2, #63	; 0x3f
 800104a:	2100      	movs	r1, #0
 800104c:	2078      	movs	r0, #120	; 0x78
 800104e:	f000 fa2b 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001052:	22a4      	movs	r2, #164	; 0xa4
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 fa26 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800105c:	22d3      	movs	r2, #211	; 0xd3
 800105e:	2100      	movs	r1, #0
 8001060:	2078      	movs	r0, #120	; 0x78
 8001062:	f000 fa21 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2078      	movs	r0, #120	; 0x78
 800106c:	f000 fa1c 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001070:	22d5      	movs	r2, #213	; 0xd5
 8001072:	2100      	movs	r1, #0
 8001074:	2078      	movs	r0, #120	; 0x78
 8001076:	f000 fa17 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800107a:	22f0      	movs	r2, #240	; 0xf0
 800107c:	2100      	movs	r1, #0
 800107e:	2078      	movs	r0, #120	; 0x78
 8001080:	f000 fa12 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001084:	22d9      	movs	r2, #217	; 0xd9
 8001086:	2100      	movs	r1, #0
 8001088:	2078      	movs	r0, #120	; 0x78
 800108a:	f000 fa0d 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800108e:	2222      	movs	r2, #34	; 0x22
 8001090:	2100      	movs	r1, #0
 8001092:	2078      	movs	r0, #120	; 0x78
 8001094:	f000 fa08 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001098:	22da      	movs	r2, #218	; 0xda
 800109a:	2100      	movs	r1, #0
 800109c:	2078      	movs	r0, #120	; 0x78
 800109e:	f000 fa03 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80010a2:	2212      	movs	r2, #18
 80010a4:	2100      	movs	r1, #0
 80010a6:	2078      	movs	r0, #120	; 0x78
 80010a8:	f000 f9fe 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80010ac:	22db      	movs	r2, #219	; 0xdb
 80010ae:	2100      	movs	r1, #0
 80010b0:	2078      	movs	r0, #120	; 0x78
 80010b2:	f000 f9f9 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010b6:	2220      	movs	r2, #32
 80010b8:	2100      	movs	r1, #0
 80010ba:	2078      	movs	r0, #120	; 0x78
 80010bc:	f000 f9f4 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010c0:	228d      	movs	r2, #141	; 0x8d
 80010c2:	2100      	movs	r1, #0
 80010c4:	2078      	movs	r0, #120	; 0x78
 80010c6:	f000 f9ef 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010ca:	2214      	movs	r2, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	; 0x78
 80010d0:	f000 f9ea 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010d4:	22af      	movs	r2, #175	; 0xaf
 80010d6:	2100      	movs	r1, #0
 80010d8:	2078      	movs	r0, #120	; 0x78
 80010da:	f000 f9e5 	bl	80014a8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010de:	222e      	movs	r2, #46	; 0x2e
 80010e0:	2100      	movs	r1, #0
 80010e2:	2078      	movs	r0, #120	; 0x78
 80010e4:	f000 f9e0 	bl	80014a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f843 	bl	8001174 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80010ee:	f000 f813 	bl	8001118 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <SSD1306_Init+0x184>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SSD1306_Init+0x184>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SSD1306_Init+0x184>)
 8001100:	2201      	movs	r2, #1
 8001102:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000584 	.word	0x20000584
 8001114:	20000524 	.word	0x20000524

08001118 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e01d      	b.n	8001160 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3b50      	subs	r3, #80	; 0x50
 8001128:	b2db      	uxtb	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	; 0x78
 8001130:	f000 f9ba 	bl	80014a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	; 0x78
 800113a:	f000 f9b5 	bl	80014a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800113e:	2210      	movs	r2, #16
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	; 0x78
 8001144:	f000 f9b0 	bl	80014a8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	01db      	lsls	r3, r3, #7
 800114c:	4a08      	ldr	r2, [pc, #32]	; (8001170 <SSD1306_UpdateScreen+0x58>)
 800114e:	441a      	add	r2, r3
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	2140      	movs	r1, #64	; 0x40
 8001154:	2078      	movs	r0, #120	; 0x78
 8001156:	f000 f95f 	bl	8001418 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	3301      	adds	r3, #1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d9de      	bls.n	8001124 <SSD1306_UpdateScreen+0xc>
	}
}
 8001166:	bf00      	nop
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000124 	.word	0x20000124

08001174 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <SSD1306_Fill+0x14>
 8001184:	2300      	movs	r3, #0
 8001186:	e000      	b.n	800118a <SSD1306_Fill+0x16>
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118e:	4619      	mov	r1, r3
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <SSD1306_Fill+0x2c>)
 8001192:	f002 fe29 	bl	8003de8 <memset>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000124 	.word	0x20000124

080011a4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
 80011ae:	460b      	mov	r3, r1
 80011b0:	80bb      	strh	r3, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	70fb      	strb	r3, [r7, #3]
	if (
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	2b7f      	cmp	r3, #127	; 0x7f
 80011ba:	d848      	bhi.n	800124e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	2b3f      	cmp	r3, #63	; 0x3f
 80011c0:	d845      	bhi.n	800124e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <SSD1306_DrawPixel+0xb8>)
 80011c4:	791b      	ldrb	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf0c      	ite	eq
 80011d0:	2301      	moveq	r3, #1
 80011d2:	2300      	movne	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d11a      	bne.n	8001214 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	b298      	uxth	r0, r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	01db      	lsls	r3, r3, #7
 80011ea:	4413      	add	r3, r2
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <SSD1306_DrawPixel+0xbc>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b259      	sxtb	r1, r3
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	4603      	mov	r3, r0
 8001208:	01db      	lsls	r3, r3, #7
 800120a:	4413      	add	r3, r2
 800120c:	b2c9      	uxtb	r1, r1
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <SSD1306_DrawPixel+0xbc>)
 8001210:	54d1      	strb	r1, [r2, r3]
 8001212:	e01d      	b.n	8001250 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	88bb      	ldrh	r3, [r7, #4]
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	b298      	uxth	r0, r3
 800121c:	4603      	mov	r3, r0
 800121e:	01db      	lsls	r3, r3, #7
 8001220:	4413      	add	r3, r2
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <SSD1306_DrawPixel+0xbc>)
 8001224:	5cd3      	ldrb	r3, [r2, r3]
 8001226:	b25a      	sxtb	r2, r3
 8001228:	88bb      	ldrh	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	b25b      	sxtb	r3, r3
 800123a:	4013      	ands	r3, r2
 800123c:	b259      	sxtb	r1, r3
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	4603      	mov	r3, r0
 8001242:	01db      	lsls	r3, r3, #7
 8001244:	4413      	add	r3, r2
 8001246:	b2c9      	uxtb	r1, r1
 8001248:	4a05      	ldr	r2, [pc, #20]	; (8001260 <SSD1306_DrawPixel+0xbc>)
 800124a:	54d1      	strb	r1, [r2, r3]
 800124c:	e000      	b.n	8001250 <SSD1306_DrawPixel+0xac>
		return;
 800124e:	bf00      	nop
	}
}
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000524 	.word	0x20000524
 8001260:	20000124 	.word	0x20000124

08001264 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	80fb      	strh	r3, [r7, #6]
 8001270:	4613      	mov	r3, r2
 8001272:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <SSD1306_GotoXY+0x28>)
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <SSD1306_GotoXY+0x28>)
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	8053      	strh	r3, [r2, #2]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	20000524 	.word	0x20000524

08001290 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012a0:	4b3a      	ldr	r3, [pc, #232]	; (800138c <SSD1306_Putc+0xfc>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
	if (
 80012ac:	2b7f      	cmp	r3, #127	; 0x7f
 80012ae:	dc07      	bgt.n	80012c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <SSD1306_Putc+0xfc>)
 80012b2:	885b      	ldrh	r3, [r3, #2]
 80012b4:	461a      	mov	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	785b      	ldrb	r3, [r3, #1]
 80012ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012bc:	2b3f      	cmp	r3, #63	; 0x3f
 80012be:	dd01      	ble.n	80012c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e05e      	b.n	8001382 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e04b      	b.n	8001362 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	3b20      	subs	r3, #32
 80012d2:	6839      	ldr	r1, [r7, #0]
 80012d4:	7849      	ldrb	r1, [r1, #1]
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	440b      	add	r3, r1
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	e030      	b.n	8001350 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d010      	beq.n	8001320 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <SSD1306_Putc+0xfc>)
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b298      	uxth	r0, r3
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <SSD1306_Putc+0xfc>)
 800130c:	885a      	ldrh	r2, [r3, #2]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	b29b      	uxth	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	79ba      	ldrb	r2, [r7, #6]
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff ff43 	bl	80011a4 <SSD1306_DrawPixel>
 800131e:	e014      	b.n	800134a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <SSD1306_Putc+0xfc>)
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	b29b      	uxth	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b298      	uxth	r0, r3
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <SSD1306_Putc+0xfc>)
 800132e:	885a      	ldrh	r2, [r3, #2]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4413      	add	r3, r2
 8001336:	b299      	uxth	r1, r3
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	f7ff ff2d 	bl	80011a4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3301      	adds	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4293      	cmp	r3, r2
 800135a:	d3c8      	bcc.n	80012ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	461a      	mov	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4293      	cmp	r3, r2
 800136c:	d3ad      	bcc.n	80012ca <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <SSD1306_Putc+0xfc>)
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4413      	add	r3, r2
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <SSD1306_Putc+0xfc>)
 800137e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001380:	79fb      	ldrb	r3, [r7, #7]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000524 	.word	0x20000524

08001390 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800139e:	e012      	b.n	80013c6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff71 	bl	8001290 <SSD1306_Putc>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d002      	beq.n	80013c0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	e008      	b.n	80013d2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1e8      	bne.n	80013a0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	781b      	ldrb	r3, [r3, #0]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff fec8 	bl	8001174 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80013e4:	f7ff fe98 	bl	8001118 <SSD1306_UpdateScreen>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <ssd1306_I2C_Init+0x28>)
 80013f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013f6:	e002      	b.n	80013fe <ssd1306_I2C_Init+0x12>
		p--;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f9      	bne.n	80013f8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	0003d090 	.word	0x0003d090

08001418 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b0c7      	sub	sp, #284	; 0x11c
 800141c:	af02      	add	r7, sp, #8
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	4639      	mov	r1, r7
 8001424:	600a      	str	r2, [r1, #0]
 8001426:	4619      	mov	r1, r3
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	4622      	mov	r2, r4
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	1dbb      	adds	r3, r7, #6
 8001430:	4602      	mov	r2, r0
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	460a      	mov	r2, r1
 8001438:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	1dba      	adds	r2, r7, #6
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800144a:	e010      	b.n	800146e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800144c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001450:	463a      	mov	r2, r7
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	441a      	add	r2, r3
 8001456:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800145a:	3301      	adds	r3, #1
 800145c:	7811      	ldrb	r1, [r2, #0]
 800145e:	f107 020c 	add.w	r2, r7, #12
 8001462:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001464:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001468:	3301      	adds	r3, #1
 800146a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800146e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001472:	b29b      	uxth	r3, r3
 8001474:	1d3a      	adds	r2, r7, #4
 8001476:	8812      	ldrh	r2, [r2, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8e7      	bhi.n	800144c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(I2C, address, dt, count+1, 10);
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b299      	uxth	r1, r3
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	f107 020c 	add.w	r2, r7, #12
 800148e:	200a      	movs	r0, #10
 8001490:	9000      	str	r0, [sp, #0]
 8001492:	4804      	ldr	r0, [pc, #16]	; (80014a4 <ssd1306_I2C_WriteMulti+0x8c>)
 8001494:	f000 fea8 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 8001498:	bf00      	nop
 800149a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000584 	.word	0x20000584

080014a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	460b      	mov	r3, r1
 80014b4:	71bb      	strb	r3, [r7, #6]
 80014b6:	4613      	mov	r3, r2
 80014b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(I2C, address, dt, 2, 10);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	b299      	uxth	r1, r3
 80014c6:	f107 020c 	add.w	r2, r7, #12
 80014ca:	230a      	movs	r3, #10
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2302      	movs	r3, #2
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <ssd1306_I2C_Write+0x38>)
 80014d2:	f000 fe89 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000584 	.word	0x20000584

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_MspInit+0x4c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x4c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <HAL_I2C_MspInit+0x84>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d12c      	bne.n	80015b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_I2C_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_I2C_MspInit+0x88>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_I2C_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001584:	2304      	movs	r3, #4
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <HAL_I2C_MspInit+0x8c>)
 8001590:	f000 fb4a 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_I2C_MspInit+0x88>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_I2C_MspInit+0x88>)
 800159e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_I2C_MspInit+0x88>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40005400 	.word	0x40005400
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020400 	.word	0x40020400

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <HAL_UART_MspInit+0x94>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d134      	bne.n	8001650 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0x98>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_UART_MspInit+0x98>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_UART_MspInit+0x98>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0x98>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_UART_MspInit+0x98>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_UART_MspInit+0x98>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800161e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001630:	2307      	movs	r3, #7
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <HAL_UART_MspInit+0x9c>)
 800163c:	f000 faf4 	bl	8001c28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2025      	movs	r0, #37	; 0x25
 8001646:	f000 fa26 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800164a:	2025      	movs	r0, #37	; 0x25
 800164c:	f000 fa3f 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40011000 	.word	0x40011000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b0:	f000 f8d2 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr(&huart1);
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <USART1_IRQHandler+0x14>)
 80016be:	f7ff fa67 	bl	8000b90 <Uart_isr>


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016c2:	4802      	ldr	r0, [pc, #8]	; (80016cc <USART1_IRQHandler+0x14>)
 80016c4:	f001 fe88 	bl	80033d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000540 	.word	0x20000540

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f002 fb48 	bl	8003d94 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20020000 	.word	0x20020000
 8001730:	00000400 	.word	0x00000400
 8001734:	2000052c 	.word	0x2000052c
 8001738:	20000610 	.word	0x20000610

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001766:	490e      	ldr	r1, [pc, #56]	; (80017a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800177c:	4c0b      	ldr	r4, [pc, #44]	; (80017ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800178a:	f7ff ffd7 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f002 fb07 	bl	8003da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7ff fa57 	bl	8000c44 <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017a4:	0800564c 	.word	0x0800564c
  ldr r2, =_sbss
 80017a8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017ac:	2000060c 	.word	0x2000060c

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f94f 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fe7c 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f967 	bl	8001aea <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 f92f 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000008 	.word	0x20000008
 8001850:	20000010 	.word	0x20000010
 8001854:	2000000c 	.word	0x2000000c

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000010 	.word	0x20000010
 800187c:	200005f8 	.word	0x200005f8

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200005f8 	.word	0x200005f8

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000010 	.word	0x20000010

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff8e 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff29 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff3e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff8e 	bl	80019d4 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff31 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff feb6 	bl	8001880 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d008      	beq.n	8001b34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e052      	b.n	8001bda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0216 	bic.w	r2, r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <HAL_DMA_Abort+0x62>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0208 	bic.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b84:	e013      	b.n	8001bae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b86:	f7ff fe7b 	bl	8001880 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d90c      	bls.n	8001bae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e015      	b.n	8001bda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e4      	bne.n	8001b86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	223f      	movs	r2, #63	; 0x3f
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d004      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e00c      	b.n	8001c1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2205      	movs	r2, #5
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e16b      	b.n	8001f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 815a 	bne.w	8001f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d005      	beq.n	8001c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80b4 	beq.w	8001f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a5f      	ldr	r2, [pc, #380]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a5b      	ldr	r2, [pc, #364]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_GPIO_Init+0x314>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d02b      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_GPIO_Init+0x318>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x222>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x21e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x21a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4e      	ldr	r2, [pc, #312]	; (8001f4c <HAL_GPIO_Init+0x324>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x216>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_GPIO_Init+0x328>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <HAL_GPIO_Init+0x32c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4b      	ldr	r2, [pc, #300]	; (8001f58 <HAL_GPIO_Init+0x330>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x20a>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00e      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e32:	2308      	movs	r3, #8
 8001e34:	e00c      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e36:	2306      	movs	r3, #6
 8001e38:	e00a      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e60:	4935      	ldr	r1, [pc, #212]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e92:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e98:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebc:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f67f ae90 	bls.w	8001c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e12b      	b.n	80021ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fad4 	bl	8001534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc4:	f001 f992 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8001fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a81      	ldr	r2, [pc, #516]	; (80021d4 <HAL_I2C_Init+0x274>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d807      	bhi.n	8001fe4 <HAL_I2C_Init+0x84>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a80      	ldr	r2, [pc, #512]	; (80021d8 <HAL_I2C_Init+0x278>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	bf94      	ite	ls
 8001fdc:	2301      	movls	r3, #1
 8001fde:	2300      	movhi	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e006      	b.n	8001ff2 <HAL_I2C_Init+0x92>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a7d      	ldr	r2, [pc, #500]	; (80021dc <HAL_I2C_Init+0x27c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	bf94      	ite	ls
 8001fec:	2301      	movls	r3, #1
 8001fee:	2300      	movhi	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0e7      	b.n	80021ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a78      	ldr	r2, [pc, #480]	; (80021e0 <HAL_I2C_Init+0x280>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0c9b      	lsrs	r3, r3, #18
 8002004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_I2C_Init+0x274>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d802      	bhi.n	8002034 <HAL_I2C_Init+0xd4>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3301      	adds	r3, #1
 8002032:	e009      	b.n	8002048 <HAL_I2C_Init+0xe8>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	4a69      	ldr	r2, [pc, #420]	; (80021e4 <HAL_I2C_Init+0x284>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	3301      	adds	r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	430b      	orrs	r3, r1
 800204e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800205a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	495c      	ldr	r1, [pc, #368]	; (80021d4 <HAL_I2C_Init+0x274>)
 8002064:	428b      	cmp	r3, r1
 8002066:	d819      	bhi.n	800209c <HAL_I2C_Init+0x13c>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e59      	subs	r1, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fbb1 f3f3 	udiv	r3, r1, r3
 8002076:	1c59      	adds	r1, r3, #1
 8002078:	f640 73fc 	movw	r3, #4092	; 0xffc
 800207c:	400b      	ands	r3, r1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_I2C_Init+0x138>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1e59      	subs	r1, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002096:	e051      	b.n	800213c <HAL_I2C_Init+0x1dc>
 8002098:	2304      	movs	r3, #4
 800209a:	e04f      	b.n	800213c <HAL_I2C_Init+0x1dc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d111      	bne.n	80020c8 <HAL_I2C_Init+0x168>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e58      	subs	r0, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	440b      	add	r3, r1
 80020b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e012      	b.n	80020ee <HAL_I2C_Init+0x18e>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Init+0x196>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e022      	b.n	800213c <HAL_I2C_Init+0x1dc>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10e      	bne.n	800211c <HAL_I2C_Init+0x1bc>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e58      	subs	r0, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	440b      	add	r3, r1
 800210c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211a:	e00f      	b.n	800213c <HAL_I2C_Init+0x1dc>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	0099      	lsls	r1, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	6809      	ldr	r1, [r1, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800216a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6911      	ldr	r1, [r2, #16]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68d2      	ldr	r2, [r2, #12]
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	430b      	orrs	r3, r1
 800217e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	000186a0 	.word	0x000186a0
 80021d8:	001e847f 	.word	0x001e847f
 80021dc:	003d08ff 	.word	0x003d08ff
 80021e0:	431bde83 	.word	0x431bde83
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
 80021f8:	4613      	mov	r3, r2
 80021fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff fb40 	bl	8001880 <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	f040 80e0 	bne.w	80023d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2319      	movs	r3, #25
 8002216:	2201      	movs	r2, #1
 8002218:	4970      	ldr	r1, [pc, #448]	; (80023dc <HAL_I2C_Master_Transmit+0x1f4>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fa92 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
 8002228:	e0d3      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_I2C_Master_Transmit+0x50>
 8002234:	2302      	movs	r3, #2
 8002236:	e0cc      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d007      	beq.n	800225e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2221      	movs	r2, #33	; 0x21
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2210      	movs	r2, #16
 800227a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	893a      	ldrh	r2, [r7, #8]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022a0:	8979      	ldrh	r1, [r7, #10]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f9ca 	bl	8002640 <I2C_MasterRequestWrite>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e08d      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022cc:	e066      	b.n	800239c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	6a39      	ldr	r1, [r7, #32]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fb0c 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d107      	bne.n	80022f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b04      	cmp	r3, #4
 8002336:	d11b      	bne.n	8002370 <HAL_I2C_Master_Transmit+0x188>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	6a39      	ldr	r1, [r7, #32]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fafc 	bl	8002972 <I2C_WaitOnBTFFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e01a      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d194      	bne.n	80022ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	00100002 	.word	0x00100002
 80023e0:	ffff0000 	.word	0xffff0000

080023e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	460b      	mov	r3, r1
 80023f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff fa44 	bl	8001880 <HAL_GetTick>
 80023f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b20      	cmp	r3, #32
 8002408:	f040 8111 	bne.w	800262e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2319      	movs	r3, #25
 8002412:	2201      	movs	r2, #1
 8002414:	4988      	ldr	r1, [pc, #544]	; (8002638 <HAL_I2C_IsDeviceReady+0x254>)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f994 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
 8002424:	e104      	b.n	8002630 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_I2C_IsDeviceReady+0x50>
 8002430:	2302      	movs	r3, #2
 8002432:	e0fd      	b.n	8002630 <HAL_I2C_IsDeviceReady+0x24c>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d007      	beq.n	800245a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002468:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2224      	movs	r2, #36	; 0x24
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a70      	ldr	r2, [pc, #448]	; (800263c <HAL_I2C_IsDeviceReady+0x258>)
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800248c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2200      	movs	r2, #0
 8002496:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f952 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b4:	d103      	bne.n	80024be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0b6      	b.n	8002630 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024c2:	897b      	ldrh	r3, [r7, #10]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024d2:	f7ff f9d5 	bl	8001880 <HAL_GetTick>
 80024d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002506:	e025      	b.n	8002554 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002508:	f7ff f9ba 	bl	8001880 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d302      	bcc.n	800251e <HAL_I2C_IsDeviceReady+0x13a>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	22a0      	movs	r2, #160	; 0xa0
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b02      	cmp	r3, #2
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2ba0      	cmp	r3, #160	; 0xa0
 800255e:	d005      	beq.n	800256c <HAL_I2C_IsDeviceReady+0x188>
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <HAL_I2C_IsDeviceReady+0x188>
 8002566:	7dbb      	ldrb	r3, [r7, #22]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0cd      	beq.n	8002508 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d129      	bne.n	80025d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002590:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2319      	movs	r3, #25
 80025ae:	2201      	movs	r2, #1
 80025b0:	4921      	ldr	r1, [pc, #132]	; (8002638 <HAL_I2C_IsDeviceReady+0x254>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f8c6 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e036      	b.n	8002630 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e02c      	b.n	8002630 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2319      	movs	r3, #25
 80025f6:	2201      	movs	r2, #1
 80025f8:	490f      	ldr	r1, [pc, #60]	; (8002638 <HAL_I2C_IsDeviceReady+0x254>)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f8a2 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e012      	b.n	8002630 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3301      	adds	r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	f4ff af32 	bcc.w	800247e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	00100002 	.word	0x00100002
 800263c:	ffff0000 	.word	0xffff0000

08002640 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d006      	beq.n	800266a <I2C_MasterRequestWrite+0x2a>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d003      	beq.n	800266a <I2C_MasterRequestWrite+0x2a>
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002668:	d108      	bne.n	800267c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e00b      	b.n	8002694 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	2b12      	cmp	r3, #18
 8002682:	d107      	bne.n	8002694 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002692:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f84f 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ba:	d103      	bne.n	80026c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e035      	b.n	8002734 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026d0:	d108      	bne.n	80026e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026e0:	611a      	str	r2, [r3, #16]
 80026e2:	e01b      	b.n	800271c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026e4:	897b      	ldrh	r3, [r7, #10]
 80026e6:	11db      	asrs	r3, r3, #7
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f003 0306 	and.w	r3, r3, #6
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f063 030f 	orn	r3, r3, #15
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <I2C_MasterRequestWrite+0xfc>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f875 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e010      	b.n	8002734 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002712:	897b      	ldrh	r3, [r7, #10]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4907      	ldr	r1, [pc, #28]	; (8002740 <I2C_MasterRequestWrite+0x100>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f865 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	00010008 	.word	0x00010008
 8002740:	00010002 	.word	0x00010002

08002744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002754:	e025      	b.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d021      	beq.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7ff f88f 	bl	8001880 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e023      	b.n	80027ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d10d      	bne.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	e00c      	b.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d0b6      	beq.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002800:	e051      	b.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	d123      	bne.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800282a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f043 0204 	orr.w	r2, r3, #4
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e046      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d021      	beq.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7ff f80d 	bl	8001880 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e020      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10c      	bne.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e00b      	b.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	43da      	mvns	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d18d      	bne.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fc:	e02d      	b.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f878 	bl	80029f4 <I2C_IsAcknowledgeFailed>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e02d      	b.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d021      	beq.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe ffb3 	bl	8001880 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d116      	bne.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e007      	b.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d1ca      	bne.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800297e:	e02d      	b.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f837 	bl	80029f4 <I2C_IsAcknowledgeFailed>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e02d      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d021      	beq.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	f7fe ff72 	bl	8001880 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d302      	bcc.n	80029ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d1ca      	bne.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0a:	d11b      	bne.n	8002a44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e264      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d075      	beq.n	8002b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a72:	4ba3      	ldr	r3, [pc, #652]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d00c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7e:	4ba0      	ldr	r3, [pc, #640]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d112      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8a:	4b9d      	ldr	r3, [pc, #628]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a96:	d10b      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	4b99      	ldr	r3, [pc, #612]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d05b      	beq.n	8002b5c <HAL_RCC_OscConfig+0x108>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d157      	bne.n	8002b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e23f      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d106      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x74>
 8002aba:	4b91      	ldr	r3, [pc, #580]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a90      	ldr	r2, [pc, #576]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e01d      	b.n	8002b04 <HAL_RCC_OscConfig+0xb0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x98>
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a8a      	ldr	r2, [pc, #552]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a87      	ldr	r2, [pc, #540]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0xb0>
 8002aec:	4b84      	ldr	r3, [pc, #528]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a83      	ldr	r2, [pc, #524]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a80      	ldr	r2, [pc, #512]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe feb8 	bl	8001880 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe feb4 	bl	8001880 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e204      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0xc0>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe fea4 	bl	8001880 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fea0 	bl	8001880 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1f0      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0xe8>
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6a:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b76:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d11c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d116      	bne.n	8002bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x152>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1c4      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4952      	ldr	r1, [pc, #328]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	e03a      	b.n	8002c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <HAL_RCC_OscConfig+0x2b0>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fe59 	bl	8001880 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fe55 	bl	8001880 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e1a5      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4940      	ldr	r1, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
 8002c04:	e015      	b.n	8002c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <HAL_RCC_OscConfig+0x2b0>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fe38 	bl	8001880 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c14:	f7fe fe34 	bl	8001880 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e184      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d030      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_RCC_OscConfig+0x2b4>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fe18 	bl	8001880 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c54:	f7fe fe14 	bl	8001880 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e164      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x200>
 8002c72:	e015      	b.n	8002ca0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_OscConfig+0x2b4>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fe01 	bl	8001880 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c82:	f7fe fdfd 	bl	8001880 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e14d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80a0 	beq.w	8002dee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10f      	bne.n	8002cde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x2b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d121      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_RCC_OscConfig+0x2b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <HAL_RCC_OscConfig+0x2b8>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fdc3 	bl	8001880 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	e011      	b.n	8002d22 <HAL_RCC_OscConfig+0x2ce>
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	42470000 	.word	0x42470000
 8002d08:	42470e80 	.word	0x42470e80
 8002d0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d10:	f7fe fdb6 	bl	8001880 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e106      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <HAL_RCC_OscConfig+0x4e4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d106      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2f0>
 8002d36:	4b81      	ldr	r3, [pc, #516]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a80      	ldr	r2, [pc, #512]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	e01c      	b.n	8002d7e <HAL_RCC_OscConfig+0x32a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x312>
 8002d4c:	4b7b      	ldr	r3, [pc, #492]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a7a      	ldr	r2, [pc, #488]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
 8002d58:	4b78      	ldr	r3, [pc, #480]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a77      	ldr	r2, [pc, #476]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	e00b      	b.n	8002d7e <HAL_RCC_OscConfig+0x32a>
 8002d66:	4b75      	ldr	r3, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a74      	ldr	r2, [pc, #464]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
 8002d72:	4b72      	ldr	r3, [pc, #456]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a71      	ldr	r2, [pc, #452]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7fe fd7b 	bl	8001880 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fd77 	bl	8001880 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0c5      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCC_OscConfig+0x33a>
 8002db0:	e014      	b.n	8002ddc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe fd65 	bl	8001880 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe fd61 	bl	8001880 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0af      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ee      	bne.n	8002dba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4b56      	ldr	r3, [pc, #344]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a55      	ldr	r2, [pc, #340]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 809b 	beq.w	8002f2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d05c      	beq.n	8002ebe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d141      	bne.n	8002e90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <HAL_RCC_OscConfig+0x4ec>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fd35 	bl	8001880 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe fd31 	bl	8001880 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e081      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2c:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	019b      	lsls	r3, r3, #6
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	3b01      	subs	r3, #1
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	061b      	lsls	r3, r3, #24
 8002e5c:	4937      	ldr	r1, [pc, #220]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_OscConfig+0x4ec>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fd0a 	bl	8001880 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe fd06 	bl	8001880 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e056      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x41c>
 8002e8e:	e04e      	b.n	8002f2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_OscConfig+0x4ec>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe fcf3 	bl	8001880 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe fcef 	bl	8001880 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e03f      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb0:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x44a>
 8002ebc:	e037      	b.n	8002f2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e032      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eca:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_RCC_OscConfig+0x4e8>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d028      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d121      	bne.n	8002f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d11a      	bne.n	8002f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efa:	4013      	ands	r3, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d111      	bne.n	8002f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	3b01      	subs	r3, #1
 8002f14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470060 	.word	0x42470060

08002f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0cc      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f58:	4b68      	ldr	r3, [pc, #416]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d90c      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0b8      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f98:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb0:	4b53      	ldr	r3, [pc, #332]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	494d      	ldr	r1, [pc, #308]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d044      	beq.n	8003064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d119      	bne.n	8003022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e07f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d109      	bne.n	8003022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e06f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003012:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e067      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003022:	4b37      	ldr	r3, [pc, #220]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f023 0203 	bic.w	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4934      	ldr	r1, [pc, #208]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	4313      	orrs	r3, r2
 8003032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003034:	f7fe fc24 	bl	8001880 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	e00a      	b.n	8003052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303c:	f7fe fc20 	bl	8001880 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e04f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 020c 	and.w	r2, r3, #12
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	429a      	cmp	r2, r3
 8003062:	d1eb      	bne.n	800303c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d20c      	bcs.n	800308c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e032      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4916      	ldr	r1, [pc, #88]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	490e      	ldr	r1, [pc, #56]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ca:	f000 f821 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	490a      	ldr	r1, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	5ccb      	ldrb	r3, [r1, r3]
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1c8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fb84 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00
 8003100:	40023800 	.word	0x40023800
 8003104:	080055f0 	.word	0x080055f0
 8003108:	20000008 	.word	0x20000008
 800310c:	2000000c 	.word	0x2000000c

08003110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	2300      	movs	r3, #0
 8003122:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003128:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b08      	cmp	r3, #8
 8003132:	d00d      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x40>
 8003134:	2b08      	cmp	r3, #8
 8003136:	f200 80bd 	bhi.w	80032b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x34>
 800313e:	2b04      	cmp	r3, #4
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x3a>
 8003142:	e0b7      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003146:	60bb      	str	r3, [r7, #8]
       break;
 8003148:	e0b7      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800314a:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800314c:	60bb      	str	r3, [r7, #8]
      break;
 800314e:	e0b4      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003150:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003158:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315a:	4b5b      	ldr	r3, [pc, #364]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d04d      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003166:	4b58      	ldr	r3, [pc, #352]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	099b      	lsrs	r3, r3, #6
 800316c:	461a      	mov	r2, r3
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	ea02 0800 	and.w	r8, r2, r0
 800317e:	ea03 0901 	and.w	r9, r3, r1
 8003182:	4640      	mov	r0, r8
 8003184:	4649      	mov	r1, r9
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	014b      	lsls	r3, r1, #5
 8003190:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003194:	0142      	lsls	r2, r0, #5
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	ebb0 0008 	subs.w	r0, r0, r8
 800319e:	eb61 0109 	sbc.w	r1, r1, r9
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	018b      	lsls	r3, r1, #6
 80031ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031b0:	0182      	lsls	r2, r0, #6
 80031b2:	1a12      	subs	r2, r2, r0
 80031b4:	eb63 0301 	sbc.w	r3, r3, r1
 80031b8:	f04f 0000 	mov.w	r0, #0
 80031bc:	f04f 0100 	mov.w	r1, #0
 80031c0:	00d9      	lsls	r1, r3, #3
 80031c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031c6:	00d0      	lsls	r0, r2, #3
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	eb12 0208 	adds.w	r2, r2, r8
 80031d0:	eb43 0309 	adc.w	r3, r3, r9
 80031d4:	f04f 0000 	mov.w	r0, #0
 80031d8:	f04f 0100 	mov.w	r1, #0
 80031dc:	0259      	lsls	r1, r3, #9
 80031de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031e2:	0250      	lsls	r0, r2, #9
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	f7fd f844 	bl	8000280 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e04a      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	461a      	mov	r2, r3
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	ea02 0400 	and.w	r4, r2, r0
 800321a:	ea03 0501 	and.w	r5, r3, r1
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	014b      	lsls	r3, r1, #5
 800322c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003230:	0142      	lsls	r2, r0, #5
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	1b00      	subs	r0, r0, r4
 8003238:	eb61 0105 	sbc.w	r1, r1, r5
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	018b      	lsls	r3, r1, #6
 8003246:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800324a:	0182      	lsls	r2, r0, #6
 800324c:	1a12      	subs	r2, r2, r0
 800324e:	eb63 0301 	sbc.w	r3, r3, r1
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f04f 0100 	mov.w	r1, #0
 800325a:	00d9      	lsls	r1, r3, #3
 800325c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003260:	00d0      	lsls	r0, r2, #3
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	1912      	adds	r2, r2, r4
 8003268:	eb45 0303 	adc.w	r3, r5, r3
 800326c:	f04f 0000 	mov.w	r0, #0
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	0299      	lsls	r1, r3, #10
 8003276:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800327a:	0290      	lsls	r0, r2, #10
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	461a      	mov	r2, r3
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	f7fc fff8 	bl	8000280 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	3301      	adds	r3, #1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	60bb      	str	r3, [r7, #8]
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032b6:	60bb      	str	r3, [r7, #8]
      break;
 80032b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ba:	68bb      	ldr	r3, [r7, #8]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000008 	.word	0x20000008

080032ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f0:	f7ff fff0 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	; (8003310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	08005600 	.word	0x08005600

08003314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003318:	f7ff ffdc 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0b5b      	lsrs	r3, r3, #13
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	08005600 	.word	0x08005600

0800333c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e03f      	b.n	80033ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe f92e 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	; 0x24
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800337e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fb3f 	bl	8003a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10d      	bne.n	800342a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_UART_IRQHandler+0x52>
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fa57 	bl	80038d6 <UART_Receive_IT>
      return;
 8003428:	e17c      	b.n	8003724 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80b1 	beq.w	8003594 <HAL_UART_IRQHandler+0x1bc>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_UART_IRQHandler+0x70>
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80a6 	beq.w	8003594 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_UART_IRQHandler+0x90>
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_UART_IRQHandler+0xb0>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f043 0202 	orr.w	r2, r3, #2
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_UART_IRQHandler+0xd0>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00f      	beq.n	80034d2 <HAL_UART_IRQHandler+0xfa>
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <HAL_UART_IRQHandler+0xee>
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f043 0208 	orr.w	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 811f 	beq.w	800371a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_UART_IRQHandler+0x11e>
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f9f0 	bl	80038d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <HAL_UART_IRQHandler+0x146>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d031      	beq.n	8003582 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f930 	bl	8003784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d123      	bne.n	800357a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003540:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	2b00      	cmp	r3, #0
 8003548:	d013      	beq.n	8003572 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	4a77      	ldr	r2, [pc, #476]	; (800372c <HAL_UART_IRQHandler+0x354>)
 8003550:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fb43 	bl	8001be2 <HAL_DMA_Abort_IT>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800356c:	4610      	mov	r0, r2
 800356e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	e00e      	b.n	8003590 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8f0 	bl	8003758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	e00a      	b.n	8003590 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8ec 	bl	8003758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	e006      	b.n	8003590 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8e8 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800358e:	e0c4      	b.n	800371a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	bf00      	nop
    return;
 8003592:	e0c2      	b.n	800371a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 80a2 	bne.w	80036e2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 809c 	beq.w	80036e2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8096 	beq.w	80036e2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d14f      	bne.n	800367a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80035e4:	8a3b      	ldrh	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8099 	beq.w	800371e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035f0:	8a3a      	ldrh	r2, [r7, #16]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	f080 8093 	bcs.w	800371e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8a3a      	ldrh	r2, [r7, #16]
 80035fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d02b      	beq.n	8003662 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003618:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003638:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0210 	bic.w	r2, r2, #16
 8003656:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fa50 	bl	8001b02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800366a:	b29b      	uxth	r3, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f87a 	bl	800376c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003678:	e051      	b.n	800371e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003682:	b29b      	uxth	r3, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d047      	beq.n	8003722 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003692:	8a7b      	ldrh	r3, [r7, #18]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d044      	beq.n	8003722 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036a6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0210 	bic.w	r2, r2, #16
 80036d4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036d6:	8a7b      	ldrh	r3, [r7, #18]
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f846 	bl	800376c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036e0:	e01f      	b.n	8003722 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_UART_IRQHandler+0x326>
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f885 	bl	8003806 <UART_Transmit_IT>
    return;
 80036fc:	e012      	b.n	8003724 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <HAL_UART_IRQHandler+0x34c>
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8c7 	bl	80038a6 <UART_EndTransmit_IT>
    return;
 8003718:	e004      	b.n	8003724 <HAL_UART_IRQHandler+0x34c>
    return;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <HAL_UART_IRQHandler+0x34c>
      return;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <HAL_UART_IRQHandler+0x34c>
      return;
 8003722:	bf00      	nop
  }
}
 8003724:	3728      	adds	r7, #40	; 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	080037df 	.word	0x080037df

08003730 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800379a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0210 	bic.w	r2, r2, #16
 80037c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff ffad 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b21      	cmp	r3, #33	; 0x21
 8003818:	d13e      	bne.n	8003898 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d114      	bne.n	800384e <UART_Transmit_IT+0x48>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d110      	bne.n	800384e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003840:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	1c9a      	adds	r2, r3, #2
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	621a      	str	r2, [r3, #32]
 800384c:	e008      	b.n	8003860 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	1c59      	adds	r1, r3, #1
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6211      	str	r1, [r2, #32]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4619      	mov	r1, r3
 800386e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10f      	bne.n	8003894 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003882:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003892:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ff32 	bl	8003730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b22      	cmp	r3, #34	; 0x22
 80038e8:	f040 8087 	bne.w	80039fa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f4:	d117      	bne.n	8003926 <UART_Receive_IT+0x50>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d113      	bne.n	8003926 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003914:	b29a      	uxth	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	1c9a      	adds	r2, r3, #2
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28
 8003924:	e026      	b.n	8003974 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d007      	beq.n	800394a <UART_Receive_IT+0x74>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <UART_Receive_IT+0x82>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e008      	b.n	800396a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29b      	uxth	r3, r3
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4619      	mov	r1, r3
 8003982:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003984:	2b00      	cmp	r3, #0
 8003986:	d136      	bne.n	80039f6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0220 	bic.w	r2, r2, #32
 8003996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10e      	bne.n	80039e6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0210 	bic.w	r2, r2, #16
 80039d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fec4 	bl	800376c <HAL_UARTEx_RxEventCallback>
 80039e4:	e002      	b.n	80039ec <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff feac 	bl	8003744 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e002      	b.n	80039fc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a08:	b09f      	sub	sp, #124	; 0x7c
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1a:	68d9      	ldr	r1, [r3, #12]
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	ea40 0301 	orr.w	r3, r0, r1
 8003a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a48:	f021 010c 	bic.w	r1, r1, #12
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a52:	430b      	orrs	r3, r1
 8003a54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	6999      	ldr	r1, [r3, #24]
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	ea40 0301 	orr.w	r3, r0, r1
 8003a6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4bc5      	ldr	r3, [pc, #788]	; (8003d88 <UART_SetConfig+0x384>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d004      	beq.n	8003a82 <UART_SetConfig+0x7e>
 8003a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4bc3      	ldr	r3, [pc, #780]	; (8003d8c <UART_SetConfig+0x388>)
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d103      	bne.n	8003a8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a82:	f7ff fc47 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8003a86:	6778      	str	r0, [r7, #116]	; 0x74
 8003a88:	e002      	b.n	8003a90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a8a:	f7ff fc2f 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8003a8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a98:	f040 80b6 	bne.w	8003c08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9e:	461c      	mov	r4, r3
 8003aa0:	f04f 0500 	mov.w	r5, #0
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	462b      	mov	r3, r5
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	6439      	str	r1, [r7, #64]	; 0x40
 8003aac:	415b      	adcs	r3, r3
 8003aae:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ab4:	1912      	adds	r2, r2, r4
 8003ab6:	eb45 0303 	adc.w	r3, r5, r3
 8003aba:	f04f 0000 	mov.w	r0, #0
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	00d9      	lsls	r1, r3, #3
 8003ac4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ac8:	00d0      	lsls	r0, r2, #3
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	1911      	adds	r1, r2, r4
 8003ad0:	6639      	str	r1, [r7, #96]	; 0x60
 8003ad2:	416b      	adcs	r3, r5
 8003ad4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003af0:	f7fc fbc6 	bl	8000280 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4ba5      	ldr	r3, [pc, #660]	; (8003d90 <UART_SetConfig+0x38c>)
 8003afa:	fba3 2302 	umull	r2, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	011e      	lsls	r6, r3, #4
 8003b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b04:	461c      	mov	r4, r3
 8003b06:	f04f 0500 	mov.w	r5, #0
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	6339      	str	r1, [r7, #48]	; 0x30
 8003b12:	415b      	adcs	r3, r3
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
 8003b16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b1a:	1912      	adds	r2, r2, r4
 8003b1c:	eb45 0303 	adc.w	r3, r5, r3
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	00d9      	lsls	r1, r3, #3
 8003b2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b2e:	00d0      	lsls	r0, r2, #3
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	1911      	adds	r1, r2, r4
 8003b36:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b38:	416b      	adcs	r3, r5
 8003b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	1891      	adds	r1, r2, r2
 8003b48:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b4a:	415b      	adcs	r3, r3
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b56:	f7fc fb93 	bl	8000280 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4b8c      	ldr	r3, [pc, #560]	; (8003d90 <UART_SetConfig+0x38c>)
 8003b60:	fba3 1302 	umull	r1, r3, r3, r2
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	2164      	movs	r1, #100	; 0x64
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	3332      	adds	r3, #50	; 0x32
 8003b72:	4a87      	ldr	r2, [pc, #540]	; (8003d90 <UART_SetConfig+0x38c>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b80:	441e      	add	r6, r3
 8003b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b84:	4618      	mov	r0, r3
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	1894      	adds	r4, r2, r2
 8003b90:	623c      	str	r4, [r7, #32]
 8003b92:	415b      	adcs	r3, r3
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b9a:	1812      	adds	r2, r2, r0
 8003b9c:	eb41 0303 	adc.w	r3, r1, r3
 8003ba0:	f04f 0400 	mov.w	r4, #0
 8003ba4:	f04f 0500 	mov.w	r5, #0
 8003ba8:	00dd      	lsls	r5, r3, #3
 8003baa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bae:	00d4      	lsls	r4, r2, #3
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	1814      	adds	r4, r2, r0
 8003bb6:	653c      	str	r4, [r7, #80]	; 0x50
 8003bb8:	414b      	adcs	r3, r1
 8003bba:	657b      	str	r3, [r7, #84]	; 0x54
 8003bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	1891      	adds	r1, r2, r2
 8003bc8:	61b9      	str	r1, [r7, #24]
 8003bca:	415b      	adcs	r3, r3
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bd6:	f7fc fb53 	bl	8000280 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4b6c      	ldr	r3, [pc, #432]	; (8003d90 <UART_SetConfig+0x38c>)
 8003be0:	fba3 1302 	umull	r1, r3, r3, r2
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	2164      	movs	r1, #100	; 0x64
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	3332      	adds	r3, #50	; 0x32
 8003bf2:	4a67      	ldr	r2, [pc, #412]	; (8003d90 <UART_SetConfig+0x38c>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	f003 0207 	and.w	r2, r3, #7
 8003bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4432      	add	r2, r6
 8003c04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c06:	e0b9      	b.n	8003d7c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0a:	461c      	mov	r4, r3
 8003c0c:	f04f 0500 	mov.w	r5, #0
 8003c10:	4622      	mov	r2, r4
 8003c12:	462b      	mov	r3, r5
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	6139      	str	r1, [r7, #16]
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c20:	1912      	adds	r2, r2, r4
 8003c22:	eb45 0303 	adc.w	r3, r5, r3
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	00d9      	lsls	r1, r3, #3
 8003c30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c34:	00d0      	lsls	r0, r2, #3
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	eb12 0804 	adds.w	r8, r2, r4
 8003c3e:	eb43 0905 	adc.w	r9, r3, r5
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	008b      	lsls	r3, r1, #2
 8003c56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c5a:	0082      	lsls	r2, r0, #2
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	4649      	mov	r1, r9
 8003c60:	f7fc fb0e 	bl	8000280 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4b49      	ldr	r3, [pc, #292]	; (8003d90 <UART_SetConfig+0x38c>)
 8003c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	011e      	lsls	r6, r3, #4
 8003c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c74:	4618      	mov	r0, r3
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	1894      	adds	r4, r2, r2
 8003c80:	60bc      	str	r4, [r7, #8]
 8003c82:	415b      	adcs	r3, r3
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c8a:	1812      	adds	r2, r2, r0
 8003c8c:	eb41 0303 	adc.w	r3, r1, r3
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	f04f 0500 	mov.w	r5, #0
 8003c98:	00dd      	lsls	r5, r3, #3
 8003c9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c9e:	00d4      	lsls	r4, r2, #3
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	1814      	adds	r4, r2, r0
 8003ca6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ca8:	414b      	adcs	r3, r1
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	008b      	lsls	r3, r1, #2
 8003cc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cc4:	0082      	lsls	r2, r0, #2
 8003cc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cca:	f7fc fad9 	bl	8000280 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b2f      	ldr	r3, [pc, #188]	; (8003d90 <UART_SetConfig+0x38c>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a2a      	ldr	r2, [pc, #168]	; (8003d90 <UART_SetConfig+0x38c>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf2:	441e      	add	r6, r3
 8003cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f04f 0100 	mov.w	r1, #0
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	1894      	adds	r4, r2, r2
 8003d02:	603c      	str	r4, [r7, #0]
 8003d04:	415b      	adcs	r3, r3
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d0c:	1812      	adds	r2, r2, r0
 8003d0e:	eb41 0303 	adc.w	r3, r1, r3
 8003d12:	f04f 0400 	mov.w	r4, #0
 8003d16:	f04f 0500 	mov.w	r5, #0
 8003d1a:	00dd      	lsls	r5, r3, #3
 8003d1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d20:	00d4      	lsls	r4, r2, #3
 8003d22:	4622      	mov	r2, r4
 8003d24:	462b      	mov	r3, r5
 8003d26:	eb12 0a00 	adds.w	sl, r2, r0
 8003d2a:	eb43 0b01 	adc.w	fp, r3, r1
 8003d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	008b      	lsls	r3, r1, #2
 8003d42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d46:	0082      	lsls	r2, r0, #2
 8003d48:	4650      	mov	r0, sl
 8003d4a:	4659      	mov	r1, fp
 8003d4c:	f7fc fa98 	bl	8000280 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <UART_SetConfig+0x38c>)
 8003d56:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2164      	movs	r1, #100	; 0x64
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	3332      	adds	r3, #50	; 0x32
 8003d68:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <UART_SetConfig+0x38c>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	f003 020f 	and.w	r2, r3, #15
 8003d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4432      	add	r2, r6
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	377c      	adds	r7, #124	; 0x7c
 8003d80:	46bd      	mov	sp, r7
 8003d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d86:	bf00      	nop
 8003d88:	40011000 	.word	0x40011000
 8003d8c:	40011400 	.word	0x40011400
 8003d90:	51eb851f 	.word	0x51eb851f

08003d94 <__errno>:
 8003d94:	4b01      	ldr	r3, [pc, #4]	; (8003d9c <__errno+0x8>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000014 	.word	0x20000014

08003da0 <__libc_init_array>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	4d0d      	ldr	r5, [pc, #52]	; (8003dd8 <__libc_init_array+0x38>)
 8003da4:	4c0d      	ldr	r4, [pc, #52]	; (8003ddc <__libc_init_array+0x3c>)
 8003da6:	1b64      	subs	r4, r4, r5
 8003da8:	10a4      	asrs	r4, r4, #2
 8003daa:	2600      	movs	r6, #0
 8003dac:	42a6      	cmp	r6, r4
 8003dae:	d109      	bne.n	8003dc4 <__libc_init_array+0x24>
 8003db0:	4d0b      	ldr	r5, [pc, #44]	; (8003de0 <__libc_init_array+0x40>)
 8003db2:	4c0c      	ldr	r4, [pc, #48]	; (8003de4 <__libc_init_array+0x44>)
 8003db4:	f000 fc82 	bl	80046bc <_init>
 8003db8:	1b64      	subs	r4, r4, r5
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	42a6      	cmp	r6, r4
 8003dc0:	d105      	bne.n	8003dce <__libc_init_array+0x2e>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc8:	4798      	blx	r3
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7ee      	b.n	8003dac <__libc_init_array+0xc>
 8003dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd2:	4798      	blx	r3
 8003dd4:	3601      	adds	r6, #1
 8003dd6:	e7f2      	b.n	8003dbe <__libc_init_array+0x1e>
 8003dd8:	08005644 	.word	0x08005644
 8003ddc:	08005644 	.word	0x08005644
 8003de0:	08005644 	.word	0x08005644
 8003de4:	08005648 	.word	0x08005648

08003de8 <memset>:
 8003de8:	4402      	add	r2, r0
 8003dea:	4603      	mov	r3, r0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	f803 1b01 	strb.w	r1, [r3], #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <sniprintf>:
 8003df8:	b40c      	push	{r2, r3}
 8003dfa:	b530      	push	{r4, r5, lr}
 8003dfc:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <sniprintf+0x64>)
 8003dfe:	1e0c      	subs	r4, r1, #0
 8003e00:	681d      	ldr	r5, [r3, #0]
 8003e02:	b09d      	sub	sp, #116	; 0x74
 8003e04:	da08      	bge.n	8003e18 <sniprintf+0x20>
 8003e06:	238b      	movs	r3, #139	; 0x8b
 8003e08:	602b      	str	r3, [r5, #0]
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0e:	b01d      	add	sp, #116	; 0x74
 8003e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e14:	b002      	add	sp, #8
 8003e16:	4770      	bx	lr
 8003e18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003e1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e20:	bf14      	ite	ne
 8003e22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e26:	4623      	moveq	r3, r4
 8003e28:	9304      	str	r3, [sp, #16]
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e30:	9002      	str	r0, [sp, #8]
 8003e32:	9006      	str	r0, [sp, #24]
 8003e34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e3a:	ab21      	add	r3, sp, #132	; 0x84
 8003e3c:	a902      	add	r1, sp, #8
 8003e3e:	4628      	mov	r0, r5
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	f000 f889 	bl	8003f58 <_svfiprintf_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	bfbc      	itt	lt
 8003e4a:	238b      	movlt	r3, #139	; 0x8b
 8003e4c:	602b      	strlt	r3, [r5, #0]
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	d0dd      	beq.n	8003e0e <sniprintf+0x16>
 8003e52:	9b02      	ldr	r3, [sp, #8]
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e7d9      	b.n	8003e0e <sniprintf+0x16>
 8003e5a:	bf00      	nop
 8003e5c:	20000014 	.word	0x20000014

08003e60 <siprintf>:
 8003e60:	b40e      	push	{r1, r2, r3}
 8003e62:	b500      	push	{lr}
 8003e64:	b09c      	sub	sp, #112	; 0x70
 8003e66:	ab1d      	add	r3, sp, #116	; 0x74
 8003e68:	9002      	str	r0, [sp, #8]
 8003e6a:	9006      	str	r0, [sp, #24]
 8003e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e70:	4809      	ldr	r0, [pc, #36]	; (8003e98 <siprintf+0x38>)
 8003e72:	9107      	str	r1, [sp, #28]
 8003e74:	9104      	str	r1, [sp, #16]
 8003e76:	4909      	ldr	r1, [pc, #36]	; (8003e9c <siprintf+0x3c>)
 8003e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e7c:	9105      	str	r1, [sp, #20]
 8003e7e:	6800      	ldr	r0, [r0, #0]
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	a902      	add	r1, sp, #8
 8003e84:	f000 f868 	bl	8003f58 <_svfiprintf_r>
 8003e88:	9b02      	ldr	r3, [sp, #8]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	b01c      	add	sp, #112	; 0x70
 8003e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e94:	b003      	add	sp, #12
 8003e96:	4770      	bx	lr
 8003e98:	20000014 	.word	0x20000014
 8003e9c:	ffff0208 	.word	0xffff0208

08003ea0 <__ssputs_r>:
 8003ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea4:	688e      	ldr	r6, [r1, #8]
 8003ea6:	429e      	cmp	r6, r3
 8003ea8:	4682      	mov	sl, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	4690      	mov	r8, r2
 8003eae:	461f      	mov	r7, r3
 8003eb0:	d838      	bhi.n	8003f24 <__ssputs_r+0x84>
 8003eb2:	898a      	ldrh	r2, [r1, #12]
 8003eb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eb8:	d032      	beq.n	8003f20 <__ssputs_r+0x80>
 8003eba:	6825      	ldr	r5, [r4, #0]
 8003ebc:	6909      	ldr	r1, [r1, #16]
 8003ebe:	eba5 0901 	sub.w	r9, r5, r1
 8003ec2:	6965      	ldr	r5, [r4, #20]
 8003ec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ec8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ecc:	3301      	adds	r3, #1
 8003ece:	444b      	add	r3, r9
 8003ed0:	106d      	asrs	r5, r5, #1
 8003ed2:	429d      	cmp	r5, r3
 8003ed4:	bf38      	it	cc
 8003ed6:	461d      	movcc	r5, r3
 8003ed8:	0553      	lsls	r3, r2, #21
 8003eda:	d531      	bpl.n	8003f40 <__ssputs_r+0xa0>
 8003edc:	4629      	mov	r1, r5
 8003ede:	f000 fb47 	bl	8004570 <_malloc_r>
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	b950      	cbnz	r0, 8003efc <__ssputs_r+0x5c>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	f8ca 3000 	str.w	r3, [sl]
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef2:	81a3      	strh	r3, [r4, #12]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003efc:	6921      	ldr	r1, [r4, #16]
 8003efe:	464a      	mov	r2, r9
 8003f00:	f000 fabe 	bl	8004480 <memcpy>
 8003f04:	89a3      	ldrh	r3, [r4, #12]
 8003f06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0e:	81a3      	strh	r3, [r4, #12]
 8003f10:	6126      	str	r6, [r4, #16]
 8003f12:	6165      	str	r5, [r4, #20]
 8003f14:	444e      	add	r6, r9
 8003f16:	eba5 0509 	sub.w	r5, r5, r9
 8003f1a:	6026      	str	r6, [r4, #0]
 8003f1c:	60a5      	str	r5, [r4, #8]
 8003f1e:	463e      	mov	r6, r7
 8003f20:	42be      	cmp	r6, r7
 8003f22:	d900      	bls.n	8003f26 <__ssputs_r+0x86>
 8003f24:	463e      	mov	r6, r7
 8003f26:	4632      	mov	r2, r6
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	f000 fab6 	bl	800449c <memmove>
 8003f30:	68a3      	ldr	r3, [r4, #8]
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	1b9b      	subs	r3, r3, r6
 8003f36:	4432      	add	r2, r6
 8003f38:	60a3      	str	r3, [r4, #8]
 8003f3a:	6022      	str	r2, [r4, #0]
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	e7db      	b.n	8003ef8 <__ssputs_r+0x58>
 8003f40:	462a      	mov	r2, r5
 8003f42:	f000 fb6f 	bl	8004624 <_realloc_r>
 8003f46:	4606      	mov	r6, r0
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d1e1      	bne.n	8003f10 <__ssputs_r+0x70>
 8003f4c:	6921      	ldr	r1, [r4, #16]
 8003f4e:	4650      	mov	r0, sl
 8003f50:	f000 fabe 	bl	80044d0 <_free_r>
 8003f54:	e7c7      	b.n	8003ee6 <__ssputs_r+0x46>
	...

08003f58 <_svfiprintf_r>:
 8003f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5c:	4698      	mov	r8, r3
 8003f5e:	898b      	ldrh	r3, [r1, #12]
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	b09d      	sub	sp, #116	; 0x74
 8003f64:	4607      	mov	r7, r0
 8003f66:	460d      	mov	r5, r1
 8003f68:	4614      	mov	r4, r2
 8003f6a:	d50e      	bpl.n	8003f8a <_svfiprintf_r+0x32>
 8003f6c:	690b      	ldr	r3, [r1, #16]
 8003f6e:	b963      	cbnz	r3, 8003f8a <_svfiprintf_r+0x32>
 8003f70:	2140      	movs	r1, #64	; 0x40
 8003f72:	f000 fafd 	bl	8004570 <_malloc_r>
 8003f76:	6028      	str	r0, [r5, #0]
 8003f78:	6128      	str	r0, [r5, #16]
 8003f7a:	b920      	cbnz	r0, 8003f86 <_svfiprintf_r+0x2e>
 8003f7c:	230c      	movs	r3, #12
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295
 8003f84:	e0d1      	b.n	800412a <_svfiprintf_r+0x1d2>
 8003f86:	2340      	movs	r3, #64	; 0x40
 8003f88:	616b      	str	r3, [r5, #20]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8e:	2320      	movs	r3, #32
 8003f90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f98:	2330      	movs	r3, #48	; 0x30
 8003f9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004144 <_svfiprintf_r+0x1ec>
 8003f9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fa2:	f04f 0901 	mov.w	r9, #1
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	469a      	mov	sl, r3
 8003faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fae:	b10a      	cbz	r2, 8003fb4 <_svfiprintf_r+0x5c>
 8003fb0:	2a25      	cmp	r2, #37	; 0x25
 8003fb2:	d1f9      	bne.n	8003fa8 <_svfiprintf_r+0x50>
 8003fb4:	ebba 0b04 	subs.w	fp, sl, r4
 8003fb8:	d00b      	beq.n	8003fd2 <_svfiprintf_r+0x7a>
 8003fba:	465b      	mov	r3, fp
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f7ff ff6d 	bl	8003ea0 <__ssputs_r>
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	f000 80aa 	beq.w	8004120 <_svfiprintf_r+0x1c8>
 8003fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fce:	445a      	add	r2, fp
 8003fd0:	9209      	str	r2, [sp, #36]	; 0x24
 8003fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80a2 	beq.w	8004120 <_svfiprintf_r+0x1c8>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fe6:	f10a 0a01 	add.w	sl, sl, #1
 8003fea:	9304      	str	r3, [sp, #16]
 8003fec:	9307      	str	r3, [sp, #28]
 8003fee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ff2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ff4:	4654      	mov	r4, sl
 8003ff6:	2205      	movs	r2, #5
 8003ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ffc:	4851      	ldr	r0, [pc, #324]	; (8004144 <_svfiprintf_r+0x1ec>)
 8003ffe:	f7fc f8ef 	bl	80001e0 <memchr>
 8004002:	9a04      	ldr	r2, [sp, #16]
 8004004:	b9d8      	cbnz	r0, 800403e <_svfiprintf_r+0xe6>
 8004006:	06d0      	lsls	r0, r2, #27
 8004008:	bf44      	itt	mi
 800400a:	2320      	movmi	r3, #32
 800400c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004010:	0711      	lsls	r1, r2, #28
 8004012:	bf44      	itt	mi
 8004014:	232b      	movmi	r3, #43	; 0x2b
 8004016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800401a:	f89a 3000 	ldrb.w	r3, [sl]
 800401e:	2b2a      	cmp	r3, #42	; 0x2a
 8004020:	d015      	beq.n	800404e <_svfiprintf_r+0xf6>
 8004022:	9a07      	ldr	r2, [sp, #28]
 8004024:	4654      	mov	r4, sl
 8004026:	2000      	movs	r0, #0
 8004028:	f04f 0c0a 	mov.w	ip, #10
 800402c:	4621      	mov	r1, r4
 800402e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004032:	3b30      	subs	r3, #48	; 0x30
 8004034:	2b09      	cmp	r3, #9
 8004036:	d94e      	bls.n	80040d6 <_svfiprintf_r+0x17e>
 8004038:	b1b0      	cbz	r0, 8004068 <_svfiprintf_r+0x110>
 800403a:	9207      	str	r2, [sp, #28]
 800403c:	e014      	b.n	8004068 <_svfiprintf_r+0x110>
 800403e:	eba0 0308 	sub.w	r3, r0, r8
 8004042:	fa09 f303 	lsl.w	r3, r9, r3
 8004046:	4313      	orrs	r3, r2
 8004048:	9304      	str	r3, [sp, #16]
 800404a:	46a2      	mov	sl, r4
 800404c:	e7d2      	b.n	8003ff4 <_svfiprintf_r+0x9c>
 800404e:	9b03      	ldr	r3, [sp, #12]
 8004050:	1d19      	adds	r1, r3, #4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	9103      	str	r1, [sp, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	bfbb      	ittet	lt
 800405a:	425b      	neglt	r3, r3
 800405c:	f042 0202 	orrlt.w	r2, r2, #2
 8004060:	9307      	strge	r3, [sp, #28]
 8004062:	9307      	strlt	r3, [sp, #28]
 8004064:	bfb8      	it	lt
 8004066:	9204      	strlt	r2, [sp, #16]
 8004068:	7823      	ldrb	r3, [r4, #0]
 800406a:	2b2e      	cmp	r3, #46	; 0x2e
 800406c:	d10c      	bne.n	8004088 <_svfiprintf_r+0x130>
 800406e:	7863      	ldrb	r3, [r4, #1]
 8004070:	2b2a      	cmp	r3, #42	; 0x2a
 8004072:	d135      	bne.n	80040e0 <_svfiprintf_r+0x188>
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	9203      	str	r2, [sp, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	bfb8      	it	lt
 8004080:	f04f 33ff 	movlt.w	r3, #4294967295
 8004084:	3402      	adds	r4, #2
 8004086:	9305      	str	r3, [sp, #20]
 8004088:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004154 <_svfiprintf_r+0x1fc>
 800408c:	7821      	ldrb	r1, [r4, #0]
 800408e:	2203      	movs	r2, #3
 8004090:	4650      	mov	r0, sl
 8004092:	f7fc f8a5 	bl	80001e0 <memchr>
 8004096:	b140      	cbz	r0, 80040aa <_svfiprintf_r+0x152>
 8004098:	2340      	movs	r3, #64	; 0x40
 800409a:	eba0 000a 	sub.w	r0, r0, sl
 800409e:	fa03 f000 	lsl.w	r0, r3, r0
 80040a2:	9b04      	ldr	r3, [sp, #16]
 80040a4:	4303      	orrs	r3, r0
 80040a6:	3401      	adds	r4, #1
 80040a8:	9304      	str	r3, [sp, #16]
 80040aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ae:	4826      	ldr	r0, [pc, #152]	; (8004148 <_svfiprintf_r+0x1f0>)
 80040b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040b4:	2206      	movs	r2, #6
 80040b6:	f7fc f893 	bl	80001e0 <memchr>
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d038      	beq.n	8004130 <_svfiprintf_r+0x1d8>
 80040be:	4b23      	ldr	r3, [pc, #140]	; (800414c <_svfiprintf_r+0x1f4>)
 80040c0:	bb1b      	cbnz	r3, 800410a <_svfiprintf_r+0x1b2>
 80040c2:	9b03      	ldr	r3, [sp, #12]
 80040c4:	3307      	adds	r3, #7
 80040c6:	f023 0307 	bic.w	r3, r3, #7
 80040ca:	3308      	adds	r3, #8
 80040cc:	9303      	str	r3, [sp, #12]
 80040ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d0:	4433      	add	r3, r6
 80040d2:	9309      	str	r3, [sp, #36]	; 0x24
 80040d4:	e767      	b.n	8003fa6 <_svfiprintf_r+0x4e>
 80040d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80040da:	460c      	mov	r4, r1
 80040dc:	2001      	movs	r0, #1
 80040de:	e7a5      	b.n	800402c <_svfiprintf_r+0xd4>
 80040e0:	2300      	movs	r3, #0
 80040e2:	3401      	adds	r4, #1
 80040e4:	9305      	str	r3, [sp, #20]
 80040e6:	4619      	mov	r1, r3
 80040e8:	f04f 0c0a 	mov.w	ip, #10
 80040ec:	4620      	mov	r0, r4
 80040ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f2:	3a30      	subs	r2, #48	; 0x30
 80040f4:	2a09      	cmp	r2, #9
 80040f6:	d903      	bls.n	8004100 <_svfiprintf_r+0x1a8>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0c5      	beq.n	8004088 <_svfiprintf_r+0x130>
 80040fc:	9105      	str	r1, [sp, #20]
 80040fe:	e7c3      	b.n	8004088 <_svfiprintf_r+0x130>
 8004100:	fb0c 2101 	mla	r1, ip, r1, r2
 8004104:	4604      	mov	r4, r0
 8004106:	2301      	movs	r3, #1
 8004108:	e7f0      	b.n	80040ec <_svfiprintf_r+0x194>
 800410a:	ab03      	add	r3, sp, #12
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	462a      	mov	r2, r5
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <_svfiprintf_r+0x1f8>)
 8004112:	a904      	add	r1, sp, #16
 8004114:	4638      	mov	r0, r7
 8004116:	f3af 8000 	nop.w
 800411a:	1c42      	adds	r2, r0, #1
 800411c:	4606      	mov	r6, r0
 800411e:	d1d6      	bne.n	80040ce <_svfiprintf_r+0x176>
 8004120:	89ab      	ldrh	r3, [r5, #12]
 8004122:	065b      	lsls	r3, r3, #25
 8004124:	f53f af2c 	bmi.w	8003f80 <_svfiprintf_r+0x28>
 8004128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800412a:	b01d      	add	sp, #116	; 0x74
 800412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004130:	ab03      	add	r3, sp, #12
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	462a      	mov	r2, r5
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <_svfiprintf_r+0x1f8>)
 8004138:	a904      	add	r1, sp, #16
 800413a:	4638      	mov	r0, r7
 800413c:	f000 f87a 	bl	8004234 <_printf_i>
 8004140:	e7eb      	b.n	800411a <_svfiprintf_r+0x1c2>
 8004142:	bf00      	nop
 8004144:	08005608 	.word	0x08005608
 8004148:	08005612 	.word	0x08005612
 800414c:	00000000 	.word	0x00000000
 8004150:	08003ea1 	.word	0x08003ea1
 8004154:	0800560e 	.word	0x0800560e

08004158 <_printf_common>:
 8004158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800415c:	4616      	mov	r6, r2
 800415e:	4699      	mov	r9, r3
 8004160:	688a      	ldr	r2, [r1, #8]
 8004162:	690b      	ldr	r3, [r1, #16]
 8004164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004168:	4293      	cmp	r3, r2
 800416a:	bfb8      	it	lt
 800416c:	4613      	movlt	r3, r2
 800416e:	6033      	str	r3, [r6, #0]
 8004170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004174:	4607      	mov	r7, r0
 8004176:	460c      	mov	r4, r1
 8004178:	b10a      	cbz	r2, 800417e <_printf_common+0x26>
 800417a:	3301      	adds	r3, #1
 800417c:	6033      	str	r3, [r6, #0]
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	0699      	lsls	r1, r3, #26
 8004182:	bf42      	ittt	mi
 8004184:	6833      	ldrmi	r3, [r6, #0]
 8004186:	3302      	addmi	r3, #2
 8004188:	6033      	strmi	r3, [r6, #0]
 800418a:	6825      	ldr	r5, [r4, #0]
 800418c:	f015 0506 	ands.w	r5, r5, #6
 8004190:	d106      	bne.n	80041a0 <_printf_common+0x48>
 8004192:	f104 0a19 	add.w	sl, r4, #25
 8004196:	68e3      	ldr	r3, [r4, #12]
 8004198:	6832      	ldr	r2, [r6, #0]
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	42ab      	cmp	r3, r5
 800419e:	dc26      	bgt.n	80041ee <_printf_common+0x96>
 80041a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041a4:	1e13      	subs	r3, r2, #0
 80041a6:	6822      	ldr	r2, [r4, #0]
 80041a8:	bf18      	it	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	0692      	lsls	r2, r2, #26
 80041ae:	d42b      	bmi.n	8004208 <_printf_common+0xb0>
 80041b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041b4:	4649      	mov	r1, r9
 80041b6:	4638      	mov	r0, r7
 80041b8:	47c0      	blx	r8
 80041ba:	3001      	adds	r0, #1
 80041bc:	d01e      	beq.n	80041fc <_printf_common+0xa4>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	68e5      	ldr	r5, [r4, #12]
 80041c2:	6832      	ldr	r2, [r6, #0]
 80041c4:	f003 0306 	and.w	r3, r3, #6
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	bf08      	it	eq
 80041cc:	1aad      	subeq	r5, r5, r2
 80041ce:	68a3      	ldr	r3, [r4, #8]
 80041d0:	6922      	ldr	r2, [r4, #16]
 80041d2:	bf0c      	ite	eq
 80041d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d8:	2500      	movne	r5, #0
 80041da:	4293      	cmp	r3, r2
 80041dc:	bfc4      	itt	gt
 80041de:	1a9b      	subgt	r3, r3, r2
 80041e0:	18ed      	addgt	r5, r5, r3
 80041e2:	2600      	movs	r6, #0
 80041e4:	341a      	adds	r4, #26
 80041e6:	42b5      	cmp	r5, r6
 80041e8:	d11a      	bne.n	8004220 <_printf_common+0xc8>
 80041ea:	2000      	movs	r0, #0
 80041ec:	e008      	b.n	8004200 <_printf_common+0xa8>
 80041ee:	2301      	movs	r3, #1
 80041f0:	4652      	mov	r2, sl
 80041f2:	4649      	mov	r1, r9
 80041f4:	4638      	mov	r0, r7
 80041f6:	47c0      	blx	r8
 80041f8:	3001      	adds	r0, #1
 80041fa:	d103      	bne.n	8004204 <_printf_common+0xac>
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004204:	3501      	adds	r5, #1
 8004206:	e7c6      	b.n	8004196 <_printf_common+0x3e>
 8004208:	18e1      	adds	r1, r4, r3
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	2030      	movs	r0, #48	; 0x30
 800420e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004212:	4422      	add	r2, r4
 8004214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800421c:	3302      	adds	r3, #2
 800421e:	e7c7      	b.n	80041b0 <_printf_common+0x58>
 8004220:	2301      	movs	r3, #1
 8004222:	4622      	mov	r2, r4
 8004224:	4649      	mov	r1, r9
 8004226:	4638      	mov	r0, r7
 8004228:	47c0      	blx	r8
 800422a:	3001      	adds	r0, #1
 800422c:	d0e6      	beq.n	80041fc <_printf_common+0xa4>
 800422e:	3601      	adds	r6, #1
 8004230:	e7d9      	b.n	80041e6 <_printf_common+0x8e>
	...

08004234 <_printf_i>:
 8004234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	460c      	mov	r4, r1
 800423a:	4691      	mov	r9, r2
 800423c:	7e27      	ldrb	r7, [r4, #24]
 800423e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004240:	2f78      	cmp	r7, #120	; 0x78
 8004242:	4680      	mov	r8, r0
 8004244:	469a      	mov	sl, r3
 8004246:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800424a:	d807      	bhi.n	800425c <_printf_i+0x28>
 800424c:	2f62      	cmp	r7, #98	; 0x62
 800424e:	d80a      	bhi.n	8004266 <_printf_i+0x32>
 8004250:	2f00      	cmp	r7, #0
 8004252:	f000 80d8 	beq.w	8004406 <_printf_i+0x1d2>
 8004256:	2f58      	cmp	r7, #88	; 0x58
 8004258:	f000 80a3 	beq.w	80043a2 <_printf_i+0x16e>
 800425c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004264:	e03a      	b.n	80042dc <_printf_i+0xa8>
 8004266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800426a:	2b15      	cmp	r3, #21
 800426c:	d8f6      	bhi.n	800425c <_printf_i+0x28>
 800426e:	a001      	add	r0, pc, #4	; (adr r0, 8004274 <_printf_i+0x40>)
 8004270:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004274:	080042cd 	.word	0x080042cd
 8004278:	080042e1 	.word	0x080042e1
 800427c:	0800425d 	.word	0x0800425d
 8004280:	0800425d 	.word	0x0800425d
 8004284:	0800425d 	.word	0x0800425d
 8004288:	0800425d 	.word	0x0800425d
 800428c:	080042e1 	.word	0x080042e1
 8004290:	0800425d 	.word	0x0800425d
 8004294:	0800425d 	.word	0x0800425d
 8004298:	0800425d 	.word	0x0800425d
 800429c:	0800425d 	.word	0x0800425d
 80042a0:	080043ed 	.word	0x080043ed
 80042a4:	08004311 	.word	0x08004311
 80042a8:	080043cf 	.word	0x080043cf
 80042ac:	0800425d 	.word	0x0800425d
 80042b0:	0800425d 	.word	0x0800425d
 80042b4:	0800440f 	.word	0x0800440f
 80042b8:	0800425d 	.word	0x0800425d
 80042bc:	08004311 	.word	0x08004311
 80042c0:	0800425d 	.word	0x0800425d
 80042c4:	0800425d 	.word	0x0800425d
 80042c8:	080043d7 	.word	0x080043d7
 80042cc:	680b      	ldr	r3, [r1, #0]
 80042ce:	1d1a      	adds	r2, r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	600a      	str	r2, [r1, #0]
 80042d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042dc:	2301      	movs	r3, #1
 80042de:	e0a3      	b.n	8004428 <_printf_i+0x1f4>
 80042e0:	6825      	ldr	r5, [r4, #0]
 80042e2:	6808      	ldr	r0, [r1, #0]
 80042e4:	062e      	lsls	r6, r5, #24
 80042e6:	f100 0304 	add.w	r3, r0, #4
 80042ea:	d50a      	bpl.n	8004302 <_printf_i+0xce>
 80042ec:	6805      	ldr	r5, [r0, #0]
 80042ee:	600b      	str	r3, [r1, #0]
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	da03      	bge.n	80042fc <_printf_i+0xc8>
 80042f4:	232d      	movs	r3, #45	; 0x2d
 80042f6:	426d      	negs	r5, r5
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fc:	485e      	ldr	r0, [pc, #376]	; (8004478 <_printf_i+0x244>)
 80042fe:	230a      	movs	r3, #10
 8004300:	e019      	b.n	8004336 <_printf_i+0x102>
 8004302:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004306:	6805      	ldr	r5, [r0, #0]
 8004308:	600b      	str	r3, [r1, #0]
 800430a:	bf18      	it	ne
 800430c:	b22d      	sxthne	r5, r5
 800430e:	e7ef      	b.n	80042f0 <_printf_i+0xbc>
 8004310:	680b      	ldr	r3, [r1, #0]
 8004312:	6825      	ldr	r5, [r4, #0]
 8004314:	1d18      	adds	r0, r3, #4
 8004316:	6008      	str	r0, [r1, #0]
 8004318:	0628      	lsls	r0, r5, #24
 800431a:	d501      	bpl.n	8004320 <_printf_i+0xec>
 800431c:	681d      	ldr	r5, [r3, #0]
 800431e:	e002      	b.n	8004326 <_printf_i+0xf2>
 8004320:	0669      	lsls	r1, r5, #25
 8004322:	d5fb      	bpl.n	800431c <_printf_i+0xe8>
 8004324:	881d      	ldrh	r5, [r3, #0]
 8004326:	4854      	ldr	r0, [pc, #336]	; (8004478 <_printf_i+0x244>)
 8004328:	2f6f      	cmp	r7, #111	; 0x6f
 800432a:	bf0c      	ite	eq
 800432c:	2308      	moveq	r3, #8
 800432e:	230a      	movne	r3, #10
 8004330:	2100      	movs	r1, #0
 8004332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004336:	6866      	ldr	r6, [r4, #4]
 8004338:	60a6      	str	r6, [r4, #8]
 800433a:	2e00      	cmp	r6, #0
 800433c:	bfa2      	ittt	ge
 800433e:	6821      	ldrge	r1, [r4, #0]
 8004340:	f021 0104 	bicge.w	r1, r1, #4
 8004344:	6021      	strge	r1, [r4, #0]
 8004346:	b90d      	cbnz	r5, 800434c <_printf_i+0x118>
 8004348:	2e00      	cmp	r6, #0
 800434a:	d04d      	beq.n	80043e8 <_printf_i+0x1b4>
 800434c:	4616      	mov	r6, r2
 800434e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004352:	fb03 5711 	mls	r7, r3, r1, r5
 8004356:	5dc7      	ldrb	r7, [r0, r7]
 8004358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800435c:	462f      	mov	r7, r5
 800435e:	42bb      	cmp	r3, r7
 8004360:	460d      	mov	r5, r1
 8004362:	d9f4      	bls.n	800434e <_printf_i+0x11a>
 8004364:	2b08      	cmp	r3, #8
 8004366:	d10b      	bne.n	8004380 <_printf_i+0x14c>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	07df      	lsls	r7, r3, #31
 800436c:	d508      	bpl.n	8004380 <_printf_i+0x14c>
 800436e:	6923      	ldr	r3, [r4, #16]
 8004370:	6861      	ldr	r1, [r4, #4]
 8004372:	4299      	cmp	r1, r3
 8004374:	bfde      	ittt	le
 8004376:	2330      	movle	r3, #48	; 0x30
 8004378:	f806 3c01 	strble.w	r3, [r6, #-1]
 800437c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004380:	1b92      	subs	r2, r2, r6
 8004382:	6122      	str	r2, [r4, #16]
 8004384:	f8cd a000 	str.w	sl, [sp]
 8004388:	464b      	mov	r3, r9
 800438a:	aa03      	add	r2, sp, #12
 800438c:	4621      	mov	r1, r4
 800438e:	4640      	mov	r0, r8
 8004390:	f7ff fee2 	bl	8004158 <_printf_common>
 8004394:	3001      	adds	r0, #1
 8004396:	d14c      	bne.n	8004432 <_printf_i+0x1fe>
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	b004      	add	sp, #16
 800439e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a2:	4835      	ldr	r0, [pc, #212]	; (8004478 <_printf_i+0x244>)
 80043a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	680e      	ldr	r6, [r1, #0]
 80043ac:	061f      	lsls	r7, r3, #24
 80043ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80043b2:	600e      	str	r6, [r1, #0]
 80043b4:	d514      	bpl.n	80043e0 <_printf_i+0x1ac>
 80043b6:	07d9      	lsls	r1, r3, #31
 80043b8:	bf44      	itt	mi
 80043ba:	f043 0320 	orrmi.w	r3, r3, #32
 80043be:	6023      	strmi	r3, [r4, #0]
 80043c0:	b91d      	cbnz	r5, 80043ca <_printf_i+0x196>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	f023 0320 	bic.w	r3, r3, #32
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	2310      	movs	r3, #16
 80043cc:	e7b0      	b.n	8004330 <_printf_i+0xfc>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	f043 0320 	orr.w	r3, r3, #32
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	2378      	movs	r3, #120	; 0x78
 80043d8:	4828      	ldr	r0, [pc, #160]	; (800447c <_printf_i+0x248>)
 80043da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043de:	e7e3      	b.n	80043a8 <_printf_i+0x174>
 80043e0:	065e      	lsls	r6, r3, #25
 80043e2:	bf48      	it	mi
 80043e4:	b2ad      	uxthmi	r5, r5
 80043e6:	e7e6      	b.n	80043b6 <_printf_i+0x182>
 80043e8:	4616      	mov	r6, r2
 80043ea:	e7bb      	b.n	8004364 <_printf_i+0x130>
 80043ec:	680b      	ldr	r3, [r1, #0]
 80043ee:	6826      	ldr	r6, [r4, #0]
 80043f0:	6960      	ldr	r0, [r4, #20]
 80043f2:	1d1d      	adds	r5, r3, #4
 80043f4:	600d      	str	r5, [r1, #0]
 80043f6:	0635      	lsls	r5, r6, #24
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	d501      	bpl.n	8004400 <_printf_i+0x1cc>
 80043fc:	6018      	str	r0, [r3, #0]
 80043fe:	e002      	b.n	8004406 <_printf_i+0x1d2>
 8004400:	0671      	lsls	r1, r6, #25
 8004402:	d5fb      	bpl.n	80043fc <_printf_i+0x1c8>
 8004404:	8018      	strh	r0, [r3, #0]
 8004406:	2300      	movs	r3, #0
 8004408:	6123      	str	r3, [r4, #16]
 800440a:	4616      	mov	r6, r2
 800440c:	e7ba      	b.n	8004384 <_printf_i+0x150>
 800440e:	680b      	ldr	r3, [r1, #0]
 8004410:	1d1a      	adds	r2, r3, #4
 8004412:	600a      	str	r2, [r1, #0]
 8004414:	681e      	ldr	r6, [r3, #0]
 8004416:	6862      	ldr	r2, [r4, #4]
 8004418:	2100      	movs	r1, #0
 800441a:	4630      	mov	r0, r6
 800441c:	f7fb fee0 	bl	80001e0 <memchr>
 8004420:	b108      	cbz	r0, 8004426 <_printf_i+0x1f2>
 8004422:	1b80      	subs	r0, r0, r6
 8004424:	6060      	str	r0, [r4, #4]
 8004426:	6863      	ldr	r3, [r4, #4]
 8004428:	6123      	str	r3, [r4, #16]
 800442a:	2300      	movs	r3, #0
 800442c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004430:	e7a8      	b.n	8004384 <_printf_i+0x150>
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	4632      	mov	r2, r6
 8004436:	4649      	mov	r1, r9
 8004438:	4640      	mov	r0, r8
 800443a:	47d0      	blx	sl
 800443c:	3001      	adds	r0, #1
 800443e:	d0ab      	beq.n	8004398 <_printf_i+0x164>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	079b      	lsls	r3, r3, #30
 8004444:	d413      	bmi.n	800446e <_printf_i+0x23a>
 8004446:	68e0      	ldr	r0, [r4, #12]
 8004448:	9b03      	ldr	r3, [sp, #12]
 800444a:	4298      	cmp	r0, r3
 800444c:	bfb8      	it	lt
 800444e:	4618      	movlt	r0, r3
 8004450:	e7a4      	b.n	800439c <_printf_i+0x168>
 8004452:	2301      	movs	r3, #1
 8004454:	4632      	mov	r2, r6
 8004456:	4649      	mov	r1, r9
 8004458:	4640      	mov	r0, r8
 800445a:	47d0      	blx	sl
 800445c:	3001      	adds	r0, #1
 800445e:	d09b      	beq.n	8004398 <_printf_i+0x164>
 8004460:	3501      	adds	r5, #1
 8004462:	68e3      	ldr	r3, [r4, #12]
 8004464:	9903      	ldr	r1, [sp, #12]
 8004466:	1a5b      	subs	r3, r3, r1
 8004468:	42ab      	cmp	r3, r5
 800446a:	dcf2      	bgt.n	8004452 <_printf_i+0x21e>
 800446c:	e7eb      	b.n	8004446 <_printf_i+0x212>
 800446e:	2500      	movs	r5, #0
 8004470:	f104 0619 	add.w	r6, r4, #25
 8004474:	e7f5      	b.n	8004462 <_printf_i+0x22e>
 8004476:	bf00      	nop
 8004478:	08005619 	.word	0x08005619
 800447c:	0800562a 	.word	0x0800562a

08004480 <memcpy>:
 8004480:	440a      	add	r2, r1
 8004482:	4291      	cmp	r1, r2
 8004484:	f100 33ff 	add.w	r3, r0, #4294967295
 8004488:	d100      	bne.n	800448c <memcpy+0xc>
 800448a:	4770      	bx	lr
 800448c:	b510      	push	{r4, lr}
 800448e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004492:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004496:	4291      	cmp	r1, r2
 8004498:	d1f9      	bne.n	800448e <memcpy+0xe>
 800449a:	bd10      	pop	{r4, pc}

0800449c <memmove>:
 800449c:	4288      	cmp	r0, r1
 800449e:	b510      	push	{r4, lr}
 80044a0:	eb01 0402 	add.w	r4, r1, r2
 80044a4:	d902      	bls.n	80044ac <memmove+0x10>
 80044a6:	4284      	cmp	r4, r0
 80044a8:	4623      	mov	r3, r4
 80044aa:	d807      	bhi.n	80044bc <memmove+0x20>
 80044ac:	1e43      	subs	r3, r0, #1
 80044ae:	42a1      	cmp	r1, r4
 80044b0:	d008      	beq.n	80044c4 <memmove+0x28>
 80044b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ba:	e7f8      	b.n	80044ae <memmove+0x12>
 80044bc:	4402      	add	r2, r0
 80044be:	4601      	mov	r1, r0
 80044c0:	428a      	cmp	r2, r1
 80044c2:	d100      	bne.n	80044c6 <memmove+0x2a>
 80044c4:	bd10      	pop	{r4, pc}
 80044c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044ce:	e7f7      	b.n	80044c0 <memmove+0x24>

080044d0 <_free_r>:
 80044d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044d2:	2900      	cmp	r1, #0
 80044d4:	d048      	beq.n	8004568 <_free_r+0x98>
 80044d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044da:	9001      	str	r0, [sp, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f1a1 0404 	sub.w	r4, r1, #4
 80044e2:	bfb8      	it	lt
 80044e4:	18e4      	addlt	r4, r4, r3
 80044e6:	f000 f8d3 	bl	8004690 <__malloc_lock>
 80044ea:	4a20      	ldr	r2, [pc, #128]	; (800456c <_free_r+0x9c>)
 80044ec:	9801      	ldr	r0, [sp, #4]
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	4615      	mov	r5, r2
 80044f2:	b933      	cbnz	r3, 8004502 <_free_r+0x32>
 80044f4:	6063      	str	r3, [r4, #4]
 80044f6:	6014      	str	r4, [r2, #0]
 80044f8:	b003      	add	sp, #12
 80044fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044fe:	f000 b8cd 	b.w	800469c <__malloc_unlock>
 8004502:	42a3      	cmp	r3, r4
 8004504:	d90b      	bls.n	800451e <_free_r+0x4e>
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	1862      	adds	r2, r4, r1
 800450a:	4293      	cmp	r3, r2
 800450c:	bf04      	itt	eq
 800450e:	681a      	ldreq	r2, [r3, #0]
 8004510:	685b      	ldreq	r3, [r3, #4]
 8004512:	6063      	str	r3, [r4, #4]
 8004514:	bf04      	itt	eq
 8004516:	1852      	addeq	r2, r2, r1
 8004518:	6022      	streq	r2, [r4, #0]
 800451a:	602c      	str	r4, [r5, #0]
 800451c:	e7ec      	b.n	80044f8 <_free_r+0x28>
 800451e:	461a      	mov	r2, r3
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	b10b      	cbz	r3, 8004528 <_free_r+0x58>
 8004524:	42a3      	cmp	r3, r4
 8004526:	d9fa      	bls.n	800451e <_free_r+0x4e>
 8004528:	6811      	ldr	r1, [r2, #0]
 800452a:	1855      	adds	r5, r2, r1
 800452c:	42a5      	cmp	r5, r4
 800452e:	d10b      	bne.n	8004548 <_free_r+0x78>
 8004530:	6824      	ldr	r4, [r4, #0]
 8004532:	4421      	add	r1, r4
 8004534:	1854      	adds	r4, r2, r1
 8004536:	42a3      	cmp	r3, r4
 8004538:	6011      	str	r1, [r2, #0]
 800453a:	d1dd      	bne.n	80044f8 <_free_r+0x28>
 800453c:	681c      	ldr	r4, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	6053      	str	r3, [r2, #4]
 8004542:	4421      	add	r1, r4
 8004544:	6011      	str	r1, [r2, #0]
 8004546:	e7d7      	b.n	80044f8 <_free_r+0x28>
 8004548:	d902      	bls.n	8004550 <_free_r+0x80>
 800454a:	230c      	movs	r3, #12
 800454c:	6003      	str	r3, [r0, #0]
 800454e:	e7d3      	b.n	80044f8 <_free_r+0x28>
 8004550:	6825      	ldr	r5, [r4, #0]
 8004552:	1961      	adds	r1, r4, r5
 8004554:	428b      	cmp	r3, r1
 8004556:	bf04      	itt	eq
 8004558:	6819      	ldreq	r1, [r3, #0]
 800455a:	685b      	ldreq	r3, [r3, #4]
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	bf04      	itt	eq
 8004560:	1949      	addeq	r1, r1, r5
 8004562:	6021      	streq	r1, [r4, #0]
 8004564:	6054      	str	r4, [r2, #4]
 8004566:	e7c7      	b.n	80044f8 <_free_r+0x28>
 8004568:	b003      	add	sp, #12
 800456a:	bd30      	pop	{r4, r5, pc}
 800456c:	20000530 	.word	0x20000530

08004570 <_malloc_r>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	1ccd      	adds	r5, r1, #3
 8004574:	f025 0503 	bic.w	r5, r5, #3
 8004578:	3508      	adds	r5, #8
 800457a:	2d0c      	cmp	r5, #12
 800457c:	bf38      	it	cc
 800457e:	250c      	movcc	r5, #12
 8004580:	2d00      	cmp	r5, #0
 8004582:	4606      	mov	r6, r0
 8004584:	db01      	blt.n	800458a <_malloc_r+0x1a>
 8004586:	42a9      	cmp	r1, r5
 8004588:	d903      	bls.n	8004592 <_malloc_r+0x22>
 800458a:	230c      	movs	r3, #12
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	2000      	movs	r0, #0
 8004590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004592:	f000 f87d 	bl	8004690 <__malloc_lock>
 8004596:	4921      	ldr	r1, [pc, #132]	; (800461c <_malloc_r+0xac>)
 8004598:	680a      	ldr	r2, [r1, #0]
 800459a:	4614      	mov	r4, r2
 800459c:	b99c      	cbnz	r4, 80045c6 <_malloc_r+0x56>
 800459e:	4f20      	ldr	r7, [pc, #128]	; (8004620 <_malloc_r+0xb0>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b923      	cbnz	r3, 80045ae <_malloc_r+0x3e>
 80045a4:	4621      	mov	r1, r4
 80045a6:	4630      	mov	r0, r6
 80045a8:	f000 f862 	bl	8004670 <_sbrk_r>
 80045ac:	6038      	str	r0, [r7, #0]
 80045ae:	4629      	mov	r1, r5
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 f85d 	bl	8004670 <_sbrk_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d123      	bne.n	8004602 <_malloc_r+0x92>
 80045ba:	230c      	movs	r3, #12
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	4630      	mov	r0, r6
 80045c0:	f000 f86c 	bl	800469c <__malloc_unlock>
 80045c4:	e7e3      	b.n	800458e <_malloc_r+0x1e>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	1b5b      	subs	r3, r3, r5
 80045ca:	d417      	bmi.n	80045fc <_malloc_r+0x8c>
 80045cc:	2b0b      	cmp	r3, #11
 80045ce:	d903      	bls.n	80045d8 <_malloc_r+0x68>
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	441c      	add	r4, r3
 80045d4:	6025      	str	r5, [r4, #0]
 80045d6:	e004      	b.n	80045e2 <_malloc_r+0x72>
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	42a2      	cmp	r2, r4
 80045dc:	bf0c      	ite	eq
 80045de:	600b      	streq	r3, [r1, #0]
 80045e0:	6053      	strne	r3, [r2, #4]
 80045e2:	4630      	mov	r0, r6
 80045e4:	f000 f85a 	bl	800469c <__malloc_unlock>
 80045e8:	f104 000b 	add.w	r0, r4, #11
 80045ec:	1d23      	adds	r3, r4, #4
 80045ee:	f020 0007 	bic.w	r0, r0, #7
 80045f2:	1ac2      	subs	r2, r0, r3
 80045f4:	d0cc      	beq.n	8004590 <_malloc_r+0x20>
 80045f6:	1a1b      	subs	r3, r3, r0
 80045f8:	50a3      	str	r3, [r4, r2]
 80045fa:	e7c9      	b.n	8004590 <_malloc_r+0x20>
 80045fc:	4622      	mov	r2, r4
 80045fe:	6864      	ldr	r4, [r4, #4]
 8004600:	e7cc      	b.n	800459c <_malloc_r+0x2c>
 8004602:	1cc4      	adds	r4, r0, #3
 8004604:	f024 0403 	bic.w	r4, r4, #3
 8004608:	42a0      	cmp	r0, r4
 800460a:	d0e3      	beq.n	80045d4 <_malloc_r+0x64>
 800460c:	1a21      	subs	r1, r4, r0
 800460e:	4630      	mov	r0, r6
 8004610:	f000 f82e 	bl	8004670 <_sbrk_r>
 8004614:	3001      	adds	r0, #1
 8004616:	d1dd      	bne.n	80045d4 <_malloc_r+0x64>
 8004618:	e7cf      	b.n	80045ba <_malloc_r+0x4a>
 800461a:	bf00      	nop
 800461c:	20000530 	.word	0x20000530
 8004620:	20000534 	.word	0x20000534

08004624 <_realloc_r>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	4607      	mov	r7, r0
 8004628:	4614      	mov	r4, r2
 800462a:	460e      	mov	r6, r1
 800462c:	b921      	cbnz	r1, 8004638 <_realloc_r+0x14>
 800462e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004632:	4611      	mov	r1, r2
 8004634:	f7ff bf9c 	b.w	8004570 <_malloc_r>
 8004638:	b922      	cbnz	r2, 8004644 <_realloc_r+0x20>
 800463a:	f7ff ff49 	bl	80044d0 <_free_r>
 800463e:	4625      	mov	r5, r4
 8004640:	4628      	mov	r0, r5
 8004642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004644:	f000 f830 	bl	80046a8 <_malloc_usable_size_r>
 8004648:	42a0      	cmp	r0, r4
 800464a:	d20f      	bcs.n	800466c <_realloc_r+0x48>
 800464c:	4621      	mov	r1, r4
 800464e:	4638      	mov	r0, r7
 8004650:	f7ff ff8e 	bl	8004570 <_malloc_r>
 8004654:	4605      	mov	r5, r0
 8004656:	2800      	cmp	r0, #0
 8004658:	d0f2      	beq.n	8004640 <_realloc_r+0x1c>
 800465a:	4631      	mov	r1, r6
 800465c:	4622      	mov	r2, r4
 800465e:	f7ff ff0f 	bl	8004480 <memcpy>
 8004662:	4631      	mov	r1, r6
 8004664:	4638      	mov	r0, r7
 8004666:	f7ff ff33 	bl	80044d0 <_free_r>
 800466a:	e7e9      	b.n	8004640 <_realloc_r+0x1c>
 800466c:	4635      	mov	r5, r6
 800466e:	e7e7      	b.n	8004640 <_realloc_r+0x1c>

08004670 <_sbrk_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4d06      	ldr	r5, [pc, #24]	; (800468c <_sbrk_r+0x1c>)
 8004674:	2300      	movs	r3, #0
 8004676:	4604      	mov	r4, r0
 8004678:	4608      	mov	r0, r1
 800467a:	602b      	str	r3, [r5, #0]
 800467c:	f7fd f828 	bl	80016d0 <_sbrk>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_sbrk_r+0x1a>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_sbrk_r+0x1a>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	200005fc 	.word	0x200005fc

08004690 <__malloc_lock>:
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <__malloc_lock+0x8>)
 8004692:	f000 b811 	b.w	80046b8 <__retarget_lock_acquire_recursive>
 8004696:	bf00      	nop
 8004698:	20000604 	.word	0x20000604

0800469c <__malloc_unlock>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__malloc_unlock+0x8>)
 800469e:	f000 b80c 	b.w	80046ba <__retarget_lock_release_recursive>
 80046a2:	bf00      	nop
 80046a4:	20000604 	.word	0x20000604

080046a8 <_malloc_usable_size_r>:
 80046a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ac:	1f18      	subs	r0, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bfbc      	itt	lt
 80046b2:	580b      	ldrlt	r3, [r1, r0]
 80046b4:	18c0      	addlt	r0, r0, r3
 80046b6:	4770      	bx	lr

080046b8 <__retarget_lock_acquire_recursive>:
 80046b8:	4770      	bx	lr

080046ba <__retarget_lock_release_recursive>:
 80046ba:	4770      	bx	lr

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr
